<?xml version="1.0" encoding="UTF-8"?>
<ctl:package xmlns:ctl="http://www.occamlab.com/ctl" xmlns:ctlp="http://www.occamlab.com/te/parsers" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:fn="http://www.w3.org/2005/02/xpath-functions" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:saxon="http://saxon.sf.net/" xmlns:tep="http://teamengine.sourceforge.net/parsers" xmlns:wcs="http://schemas.opengis.net/wcs/1.1.1" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <ctl:function name="wcs:get-capabilities-accept-versions">
    <ctl:param name="url"/>
    <ctl:return>Returns the response from a WCS GetCapabilities request with the AcceptVersions parameter having a value of 1.1.1 </ctl:return>
    <ctl:code>
      <ctl:request>
        <ctl:url>
          <xsl:value-of select="$url"/>
        </ctl:url>
        <ctl:method>GET</ctl:method>
        <ctl:param name="service">WCS</ctl:param>
        <ctl:param name="request">GetCapabilities</ctl:param>
	<ctl:param name="version">1.1.1</ctl:param>
        <ctl:param name="acceptversions">1.1.1</ctl:param>
        <ctlp:XMLValidatingParser>
          <ctlp:schemas>
            <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
          </ctlp:schemas>
        </ctlp:XMLValidatingParser>
      </ctl:request>
    </ctl:code>
  </ctl:function>
  <ctl:function name="wcs:describe-coverage-multiple-identifiers">
    <ctl:param name="url"/>
    <ctl:param name="http-method"/>
    <ctl:param name="identifier1"/>
    <ctl:param name="identifier2"/>
    <ctl:param name="identifier3"/>
    <ctl:return>Returns the response from a WCS DescribeCoverage request with multiple coverage identifiers</ctl:return>
    <ctl:code>
      <ctl:request>
        <ctl:url>
          <xsl:value-of select="$url"/>
        </ctl:url>
        <ctl:method>
          <xsl:choose>
            <xsl:when test="$http-method = 'GET'">GET</xsl:when>
            <xsl:otherwise>POST</xsl:otherwise>
          </xsl:choose>
        </ctl:method>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:param name="service">WCS</ctl:param>
            <ctl:param name="request">DescribeCoverage</ctl:param>
            <ctl:param name="version">1.1.1</ctl:param>
            <ctl:param name="identifiers">
              <xsl:value-of select="concat($identifier1, ',', $identifier2, ',', $identifier3)"/>
            </ctl:param>
          </xsl:when>
          <xsl:otherwise>
            <ctl:body>
              <DescribeCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1">
                <Identifier>
                  <xsl:value-of select="$identifier1"/>
                </Identifier>
                <Identifier>
                  <xsl:value-of select="$identifier2"/>
                </Identifier>
                <Identifier>
                  <xsl:value-of select="$identifier3"/>
                </Identifier>
              </DescribeCoverage>
            </ctl:body>
          </xsl:otherwise>
        </xsl:choose>
        <ctlp:XMLValidatingParser>
          <ctlp:schemas>
            <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
          </ctlp:schemas>
        </ctlp:XMLValidatingParser>
      </ctl:request>
    </ctl:code>
  </ctl:function>
  <ctl:function name="wcs:describe-coverage-minimal-request">
    <ctl:param name="url"/>
    <ctl:param name="http-method"/>
    <ctl:param name="identifier"/>
    <ctl:return>Returns the response from a WCS DescribeCoverage minimal request.</ctl:return>
    <ctl:code>
      <ctl:request>
        <ctl:url>
          <xsl:value-of select="$url"/>
        </ctl:url>
        <ctl:method>
          <xsl:choose>
            <xsl:when test="$http-method = 'GET'">GET</xsl:when>
            <xsl:otherwise>POST</xsl:otherwise>
          </xsl:choose>
        </ctl:method>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:param name="service">WCS</ctl:param>
            <ctl:param name="request">DescribeCoverage</ctl:param>
            <ctl:param name="version">1.1.1</ctl:param>
            <ctl:param name="identifiers">
              <xsl:value-of select="$identifier"/>
            </ctl:param>
          </xsl:when>
          <xsl:otherwise>
            <ctl:body>
              <DescribeCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1">
                <Identifier>
                  <xsl:value-of select="$identifier"/>
                </Identifier>
              </DescribeCoverage>
            </ctl:body>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:request>
    </ctl:code>
  </ctl:function>
  <ctl:function name="wcs:describe-coverage-response-interpolation-methods">
    <ctl:param name="url"/>
    <ctl:param name="http-method"/>
    <ctl:return>Returns the response from a WCS DescribeCoverage response with interpolation methods.</ctl:return>
    <ctl:code/>
  </ctl:function>
  <ctl:suite name="wcs:suite">
    <ctl:title>Web Coverage Service (WCS) 1.1.1</ctl:title>
    <ctl:description>Validates that a WCS server meets the requirements in the specification.</ctl:description>
    <ctl:link>docs/wcs/1.1.1/</ctl:link>
    <ctl:starting-test>wcs:Main</ctl:starting-test>
  </ctl:suite>
  <ctl:test name="wcs:Main">
    <ctl:assertion>The Implementation Under Test (IUT) satisfies all applicable
                  assertions. There are 177 tests in total. Depending on the capabilities
                       of the server, some tests are skipped. These are recorded in the
                      detailed results for each type of request.</ctl:assertion>
    <ctl:code>
      <xsl:variable name="form-values">
        <ctl:form>
          <h3>Web Coverage Service 1.1.1</h3>
          <p>This executable test suite tests the conformance of a WCS 1.1.1 server to the specification  OGC 07-067r2 which includes corrigendum 1.</p>
          <blockquote>
            <table border="0" cellpadding="5">
              <tr>
                <td align="center">URL</td>
                <td align="center">
                  <input id="url" type="text" name="url" size="100" value="http://gridlock.openplans.org:8080/geoserver-wcs/wcs"/>
                </td>
              </tr>
            </table>
            <p>The URL of the WCS for HTTP GET (KVP) encoding of GetCapabilities.</p>
          </blockquote>
          <blockquote>
            <table border="0" cellpadding="5">
              <tr>
                <td align="center">
                  <input type="submit" value="Next"/>
                </td>
              </tr>
            </table>
          </blockquote>
          <p>
            <font size="1">ETS revision 12 (Feb 29, 2008)</font>
          </p>
        </ctl:form>
      </xsl:variable>
      <xsl:variable name="url">
        <xsl:value-of select="$form-values/values/value[@key='url']"/>
      </xsl:variable>
      <xsl:variable name="result">
        <ctl:request>
          <ctl:url>
            <xsl:value-of select="$url"/>
          </ctl:url>
          <ctl:method>GET</ctl:method>
          <ctl:param name="service">WCS</ctl:param>
          <ctl:param name="request">GetCapabilities</ctl:param>
	  <ctl:param name="version">1.1.1</ctl:param>
        </ctl:request>
      </xsl:variable>
      <xsl:if test="string-length($result)=0">
        <ctl:message select="concat('No response from URL: ', $url, '. Perhaps this is not the correct address or the server is down. No tests will be performed.')"/>
        <ctl:fail/>
      </xsl:if>
      <xsl:if test="string-length($result) &gt; 0">
        <ctl:message select="concat('WCS 1.1.1 URL is ', $url, '.')"/>
        <ctl:call-test xmlns="" name="wcs:GetCapabilities-main">
          <ctl:with-param name="url" select="$url"/>
        </ctl:call-test>
        <ctl:call-test xmlns="" name="wcs:DescribeCoverage-main">
          <ctl:with-param name="url" select="$url"/>
        </ctl:call-test>
        <ctl:call-test xmlns="" name="wcs:GetCoverage-main">
          <ctl:with-param name="url" select="$url"/>
        </ctl:call-test>
      </xsl:if>
    </ctl:code>
  </ctl:test>
  <ctl:package>
    <ctl:test xmlns="" name="wcs:GetCapabilities-main">
      <ctl:param name="url"/>
      <ctl:assertion>All assertions for "GetCapabilities" conformance are satisfied.</ctl:assertion>
      <ctl:comment>Test driver for the GetCapabilities module.</ctl:comment>
      <ctl:link xmlns="" title="1. WCS-GetCapabilities">http://www.opengeospatial.org/standards/wcs#GetCapabilities</ctl:link>
      <ctl:code>
        <ctl:comment>From the GetCapabilities, which http methods are supported and what are their URLs</ctl:comment>
        <xsl:variable name="result1">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>GET</ctl:method>
            <ctl:param name="service">WCS</ctl:param>
            <ctl:param name="request">GetCapabilities</ctl:param>
	    <ctl:param name="version">1.1.1</ctl:param>
            <ctl:param name="sections">OperationsMetadata,Contents</ctl:param>
            <ctl:param name="acceptversions">1.1.1</ctl:param>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:variable name="version-number" select="$result1/*[local-name()='Capabilities'][@version]/@version"/>
        <xsl:choose>
          <xsl:when test="$version-number = '1.1.1'">
            <ctl:message select="concat('The service metadata document version number is ', $version-number, '.')"/>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('&#xA;', ' ')"/>
            <ctl:message select="concat('The service metadata document has version ', $version-number, ' but expected to find 1.1.1 as the highest protocol supported. See OGC 06-121r3 subclause 7.3.2.')"/>
            <ctl:message select="concat('&#xA;', ' ')"/>
            <ctl:fail/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="EqualUpdateSequenceValue">
          <xsl:value-of select="$result1/*[local-name()='Capabilities'][@updateSequence]/@updateSequence"/>
        </xsl:variable>
        <xsl:variable name="http-get">GET</xsl:variable>
        <xsl:variable name="http-xml">XML</xsl:variable>
        <xsl:variable name="http-soap">SOAP</xsl:variable>
        <xsl:variable name="url-get">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Get']/@xlink:href"/>
        </xsl:variable>
        <xsl:variable name="url-xml">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/@xlink:href"/>
        </xsl:variable>
        <xsl:variable name="xml-supported">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='XML'"/>
        </xsl:variable>
        <xsl:variable name="xml-supported-alternate">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='XML'"/>
        </xsl:variable>
        <xsl:variable name="soap-supported">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='SOAP'"/>
        </xsl:variable>
        <xsl:variable name="store-supported">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='GetCoverage']/*[local-name()='Parameter'][@name='store']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='True'"/>
        </xsl:variable>
        <xsl:variable name="sections-supported">
          <xsl:value-of select="$result1/*[local-name()='Capabilities'] and not($result1/*[local-name()='Capabilities']/*[local-name()='ServiceProvider'])"/>
        </xsl:variable>
        <xsl:variable name="identifier1">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'][1]/*[local-name()='Identifier']"/>
        </xsl:variable>
        <xsl:variable name="identifier2">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'][2]/*[local-name()='Identifier']"/>
        </xsl:variable>
        <xsl:variable name="identifier3">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'][3]/*[local-name()='Identifier']"/>
        </xsl:variable>
        <xsl:if test="string-length($version-number) = 0 and string-length($url-get) = 0 and string-length($identifier1) = 0">
          <ctl:message>The server seems to have a problem with handling the GetCapabilities sections parameter. No tests will be performed.</ctl:message>
          <ctl:fail/>
        </xsl:if>
        <ctl:message select="concat('The EqualUpdateSequence value is ', $EqualUpdateSequenceValue, '.')"/>
        <ctl:message select="concat('The URL for KVP encoding is ', $url-get, '.')"/>
        <ctl:message select="concat('The URL for XML encoding is ', $url-xml, '.')"/>
        <xsl:choose>
          <xsl:when test="$xml-supported = 'true' or $xml-supported-alternate = 'true'">
            <ctl:message>XML encoding is supported.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message>XML encoding is not supported.</ctl:message>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:if test="$soap-supported = 'true'">
          <ctl:message>No tests using SOAP encoding will be performed. The tests for SOAP encoding are not implemented.</ctl:message>
        </xsl:if>
        <ctl:message select="concat('sections-supported: ', $sections-supported, '.')"/>
        <xsl:variable name="update-values">
          <xsl:if test="string-length($EqualUpdateSequenceValue) &gt; 0">
            <ctl:form>
              <h3>Update Sequence Values for WCS 1.1.1</h3>
              <p>This WCS service
                               <xsl:if test="string-length($EqualUpdateSequenceValue) &gt; 0">supports</xsl:if><xsl:if test="string-length($EqualUpdateSequenceValue) = 0">does NOT support</xsl:if>
                                 updateSequence in GetCapabilities requests. Please enter values for the minimal value,
                                      the maximal value and a bogus, well-formed but non-existant, value for the updateSequence.</p>
              <blockquote>
                <table border="0" cellpadding="5">
                  <tr>
                    <td align="left">Minimal Value</td>
                    <td align="left">
                      <input type="text" name="MinimalValue" size="15" value="0"/>
                    </td>
                  </tr>
                  <tr>
                    <td align="left">Maximal Value</td>
                    <td align="left">
                      <input type="text" name="MaximalValue" size="15" value="1399999999999"/>
                    </td>
                  </tr>
                  <tr>
                    <td align="left">Bogus Value</td>
                    <td align="left">
                      <input type="text" name="BogusValue" size="15" value="bogus"/>
                    </td>
                  </tr>
                </table>
                <table border="0" cellpadding="5">
                  <tr>
                    <td align="center">
                      <input type="submit" value="Submit"/>
                    </td>
                  </tr>
                </table>
              </blockquote>
            </ctl:form>
          </xsl:if>
        </xsl:variable>
        <xsl:variable name="MinimalUpdateSequenceValue">
          <xsl:value-of select="$update-values/values/value[@key='MinimalValue']"/>
        </xsl:variable>
        <xsl:variable name="MaximalUpdateSequenceValue">
          <xsl:value-of select="$update-values/values/value[@key='MaximalValue']"/>
        </xsl:variable>
        <xsl:variable name="BogusUpdateSequenceValue">
          <xsl:value-of select="$update-values/values/value[@key='BogusValue']"/>
        </xsl:variable>
        <ctl:comment>Call the test for each applicable http method with its appropriate URL</ctl:comment>
        <xsl:if test="string-length($version-number) != 0 or string-length($url-get) != 0 or string-length($identifier1) != 0">
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('MinimalRequest', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('MinimalRequest', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('MinimalRequest', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_MinimalRequest">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'MinimalRequest', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_MinimalRequest">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'MinimalRequest', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Sections_ServiceIdentification', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Sections_ServiceIdentification', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Sections_ServiceIdentification', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_ServiceIdentification">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_ServiceIdentification', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_ServiceIdentification">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_ServiceIdentification', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Sections_ServiceProvider', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Sections_ServiceProvider', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Sections_ServiceProvider', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_ServiceProvider">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_ServiceProvider', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_ServiceProvider">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_ServiceProvider', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Sections_OperationsMetadata', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Sections_OperationsMetadata', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Sections_OperationsMetadata', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_OperationsMetadata">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_OperationsMetadata', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_OperationsMetadata">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_OperationsMetadata', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Sections_Contents', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Sections_Contents', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Sections_Contents', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_Contents">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_Contents', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_Contents">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_Contents', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Sections_All', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Sections_All', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Sections_All', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_All">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_All', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_All">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_All', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Sections_Two_Values', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Sections_Two_Values', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Sections_Two_Values', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_Two_Values">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_Two_Values', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_Two_Values">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_Two_Values', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Sections_Multiple_Values', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Sections_Multiple_Values', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Sections_Multiple_Values', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_Multiple_Values">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_Multiple_Values', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_Multiple_Values">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_Multiple_Values', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Sections_Bogus', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Sections_Bogus', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Sections_Bogus', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_Bogus">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_Bogus', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Sections_Bogus">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Sections_Bogus', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('AcceptVersions_1.1.1', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('AcceptVersions_1.1.1', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('AcceptVersions_1.1.1', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_AcceptVersions_1.1.1">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'AcceptVersions_1.1.1', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_AcceptVersions_1.1.1">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'AcceptVersions_1.1.1', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('AcceptVersions_0.0.0', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('AcceptVersions_0.0.0', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('AcceptVersions_0.0.0', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_AcceptVersions_0.0.0">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'AcceptVersions_0.0.0', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_AcceptVersions_0.0.0">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'AcceptVersions_0.0.0', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('AcceptVersions_99.99.99', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('AcceptVersions_99.99.99', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('AcceptVersions_99.99.99', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_AcceptVersions_99.99.99">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'AcceptVersions_99.99.99', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_AcceptVersions_99.99.99">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'AcceptVersions_99.99.99', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('AcceptVersions_Multiple', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('AcceptVersions_Multiple', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('AcceptVersions_Multiple', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_AcceptVersions_Multiple">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'AcceptVersions_Multiple', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_AcceptVersions_Multiple">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'AcceptVersions_Multiple', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('UpdateSequence_No_Value', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('UpdateSequence_No_Value', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('UpdateSequence_No_Value', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_UpdateSequence_No_Value">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'UpdateSequence_No_Value', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_UpdateSequence_No_Value">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'UpdateSequence_No_Value', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('UpdateSequence_Equal_Value', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('UpdateSequence_Equal_Value', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('UpdateSequence_Equal_Value', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Equal_Value">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'UpdateSequence_Equal_Value', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Equal_Value">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'UpdateSequence_Equal_Value', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('UpdateSequence_Bogus_Value', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('UpdateSequence_Bogus_Value', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('UpdateSequence_Bogus_Value', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Bogus_Value">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'UpdateSequence_Bogus_Value', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Bogus_Value">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'UpdateSequence_Bogus_Value', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('UpdateSequence_Lowest_Value', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('UpdateSequence_Lowest_Value', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('UpdateSequence_Lowest_Value', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Lowest_Value">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'UpdateSequence_Lowest_Value', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Lowest_Value">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'UpdateSequence_Lowest_Value', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('UpdateSequence_Highest_Value', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('UpdateSequence_Highest_Value', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('UpdateSequence_Highest_Value', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Highest_Value">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'UpdateSequence_Highest_Value', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Highest_Value">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'UpdateSequence_Highest_Value', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('AcceptFormats_TextXML', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('AcceptFormats_TextXML', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('AcceptFormats_TextXML', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_AcceptFormats_TextXML">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'AcceptFormats_TextXML', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_AcceptFormats_TextXML">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'AcceptFormats_TextXML', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('AcceptFormats_TextBogus', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('AcceptFormats_TextBogus', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('AcceptFormats_TextBogus', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_AcceptFormats_TextBogus">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'AcceptFormats_TextBogus', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_AcceptFormats_TextBogus">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="EqualUpdateSequenceValue" select="$EqualUpdateSequenceValue"/>
                <ctl:with-param name="BogusUpdateSequenceValue" select="$BogusUpdateSequenceValue"/>
                <ctl:with-param name="MinimalUpdateSequenceValue" select="$MinimalUpdateSequenceValue"/>
                <ctl:with-param name="MaximalUpdateSequenceValue" select="$MaximalUpdateSequenceValue"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'AcceptFormats_TextBogus', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_ServiceIdentification', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_ServiceIdentification', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_ServiceIdentification', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_ServiceIdentification">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_ServiceIdentification', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_ServiceProvider', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_ServiceProvider', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_ServiceProvider', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_ServiceProvider">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_ServiceProvider', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_OperationsMetadata', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_OperationsMetadata', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_OperationsMetadata', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_OperationsMetadata_Required_Attributes', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_OperationsMetadata_Required_Attributes', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_OperationsMetadata_Required_Attributes', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Required_Attributes">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Required_Attributes', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_OperationsMetadata_Post_Encoding', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_OperationsMetadata_Post_Encoding', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_OperationsMetadata_Post_Encoding', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Post_Encoding">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Post_Encoding', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_OperationsMetadata_Post_Multiple_Connect_Points', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_OperationsMetadata_Post_Multiple_Connect_Points', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_OperationsMetadata_Post_Multiple_Connect_Points', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Post_Multiple_Connect_Points">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Post_Multiple_Connect_Points', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_OperationsMetadata_Store_Parameter', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_OperationsMetadata_Store_Parameter', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_OperationsMetadata_Store_Parameter', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Store_Parameter">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Store_Parameter', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_OperationsMetadata_Contents', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_OperationsMetadata_Contents', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_OperationsMetadata_Contents', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_OperationsMetadata_Contents_CoverageSummary', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_OperationsMetadata_Contents_SupportedCRS', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_SupportedCRS', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_SupportedCRS', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_SupportedCRS">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_SupportedCRS', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_OperationsMetadata_Contents_SupportedFormat', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_SupportedFormat', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_SupportedFormat', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_SupportedFormat">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_SupportedFormat', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_Title', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_Title', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_Title', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_Title">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary_Title', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_Abstract', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_Abstract', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_Abstract', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_Abstract">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary_Abstract', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_SupportedFormat', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_SupportedFormat', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_SupportedFormat', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_SupportedFormat">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary_SupportedFormat', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_SupportedCRS', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_SupportedCRS', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_SupportedCRS', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_SupportedCRS">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary_SupportedCRS', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_Identifier', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_Identifier', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_Identifier', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_Identifier">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary_Identifier', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_Identifier_XML', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_Identifier_XML', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_Identifier_XML', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_Identifier_XML">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary_Identifier_XML', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_SupportedFormat_XML', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_SupportedFormat_XML', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_SupportedFormat_XML', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_SupportedFormat_XML">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary_SupportedFormat_XML', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_Identifier_Unique', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_Identifier_Unique', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_OperationsMetadata_Contents_CoverageSummary_Identifier_Unique', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_Identifier_Unique">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCapabilities', '_', 'Response_OperationsMetadata_Contents_CoverageSummary_Identifier_Unique', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_MinimalRequest">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that when a GetCapabilities request with only mandatory
           parameters is submitted, the response is valid XML that validates
           against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 1. GetCapabilities minimal request</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 7.2.2.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
	      <ctl:param name="version">1.1.1</ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS">
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Sections_ServiceIdentification">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that when a GetCapabilities request with a Sections parameter
           with value ServiceIdentification is submitted, the response is valid XML
           that validates against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 2. GetCapabilities Sections ServiceIdentification</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.3.3 Table 6 and 7.4.2 Table 10.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
	      <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="sections">ServiceIdentification</ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS">
                  <ows:Sections>
                    <ows:Section>ServiceIdentification</ows:Section>
                  </ows:Sections>
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Sections_ServiceProvider">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that when a GetCapabilities request with a Sections parameter
           with value ServiceProvider is submitted, the response is valid XML that
           validates against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 3. GetCapabilities Sections ServiceProvider</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.3.3 Table 6 and 7.4.2 Table 10.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
	      <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="sections">ServiceProvider</ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS">
                  <ows:Sections>
                    <ows:Section>ServiceProvider</ows:Section>
                  </ows:Sections>
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Sections_OperationsMetadata">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that when a GetCapabilities request with a Sections parameter
           with value OperationsMetadata is submitted, the response is valid XML
           that validates against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 4. GetCapabilities Sections OperationsMetadata</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.3.3 Table 6 and 7.4.2 Table 10.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
	      <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="sections">OperationsMetadata</ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS">
                  <ows:Sections>
                    <ows:Section>OperationsMetadata</ows:Section>
                  </ows:Sections>
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Sections_Contents">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that when a GetCapabilities request with a Sections parameter
           with value Contents is submitted, the response is valid XML that
           validates against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 5. GetCapabilities Sections Contents</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.3.3 Table 6 and 7.4.2 Table 10.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
	      <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="sections">Contents</ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS">
                  <ows:Sections>
                    <ows:Section>Contents</ows:Section>
                  </ows:Sections>
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Sections_All">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that when a GetCapabilities request with a Sections parameter
           with value All is submitted, the response is valid XML that validates
           against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 6. GetCapabilities Sections All</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.3.3 Table 6 and 7.4.2 Table 10.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
	      <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="sections">All</ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS">
                  <ows:Sections>
                    <ows:Section>All</ows:Section>
                  </ows:Sections>
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Sections_Two_Values">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that when a GetCapabilities request with a Sections parameter
           with two values is submitted, the response is valid XML that validates
           against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 7. GetCapabilities Sections Two Values</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.3.3 Table 6 and 7.4.2 Table 10.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
	      <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="sections">ServiceIdentification,ServiceProvider</ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS">
                  <ows:Sections>
                    <ows:Section>ServiceIdentification</ows:Section>
                    <ows:Section>ServiceProvider</ows:Section>
                  </ows:Sections>
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Sections_Multiple_Values">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that when a GetCapabilities request with a Sections parameter
           with multiple values is submitted, the response is valid XML that
           validates against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 8. GetCapabilities Sections Multiple Values</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.3.3 Table 6 and 7.4.2 Table 10.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
	      <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="sections">ServiceIdentification,ServiceProvider,OperationsMetadata,Contents</ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS">
                  <ows:Sections>
                    <ows:Section>ServiceIdentification</ows:Section>
                    <ows:Section>ServiceProvider</ows:Section>
                    <ows:Section>OperationsMetadata</ows:Section>
                    <ows:Section>Contents</ows:Section>
                  </ows:Sections>
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Sections_Bogus">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that when a GetCapabilities request with a Sections parameter
           with value Bogus is submitted, the response is valid XML that validates
           against the OWS Common 1.1.0 ExceptionReport schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 9. GetCapabilities Sections Bogus</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 7.4.1 Table 8.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
	      <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="sections">Bogus</ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS">
                  <ows:Sections>
                    <ows:Section>Bogus</ows:Section>
                  </ows:Sections>
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_AcceptVersions_1.1.1">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that when a GetCapabilities request with an AcceptVersions
           parameter with value 1.1.1 is submitted, the response is valid XML that
           validates against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 10. GetCapabilities AcceptVersions 1.1.1</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.2.2 Table 4 and 7.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
	      <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="acceptversions">1.1.1</ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS">
                  <ows:AcceptVersions>
                    <ows:Version>1.1.1</ows:Version>
                  </ows:AcceptVersions>
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_AcceptVersions_0.0.0">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that when a GetCapabilities request with an AcceptVersions 
           parameter with the version number 'too low' is submitted, the response
           is valid XML that validates against the OWS Common 1.1.0 
           ExceptionReport schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 11. GetCapabilities AcceptVersions 0.0.0</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.2.2 Table 4, 7.3.2 and 7.3.1.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
	      <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="acceptversions">0.0.0</ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS">
                  <ows:AcceptVersions>
                    <ows:Version>0.0.0</ows:Version>
                  </ows:AcceptVersions>
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_AcceptVersions_99.99.99">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that when a GetCapabilities request with an AcceptVersions
           parameter with the version number 'too high' is submitted, the response
           is valid XML that validates against the OWS Common 1.1.0
           ExceptionReport schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 12. GetCapabilities AcceptVersions 99.99.99</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.2.2 Table 4, 7.3.2 and 7.3.1.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
	      <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="acceptversions">99.99.99</ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS">
                  <ows:AcceptVersions>
                    <ows:Version>99.99.99</ows:Version>
                  </ows:AcceptVersions>
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_AcceptVersions_Multiple">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that when a GetCapabilities request with an AcceptVersions
           parameter with multiple values is submitted, the response is valid XML
            that validates against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 13. GetCapabilities AcceptVersions Multiple Values</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.2.2 Table 4 and 7.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
	      <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="acceptversions">0.0.0,1.1.1</ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS">
                  <ows:AcceptVersions>
                    <ows:Version>0.0.0</ows:Version>
                    <ows:Version>1.1.1</ows:Version>
                  </ows:AcceptVersions>
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_UpdateSequence_No_Value">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that when a GetCapabilities request with an UpdateSequence
           parameter with no value is submitted, the response is valid XML that
           validates against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 14. GetCapabilities UpdateSequence No Value</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.2.2 Table 4 and 7.3.4.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
	      <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="updateSequence"/>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS" updateSequence ="">
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Equal_Value">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that if the server supports UpdateSequence, when a
           GetCapabilities request with an UpdateSequence parameter with a value
           of EqualUpdateSequenceValue is submitted, the response is valid XML
           that validates against the WCS 1.1.1 GetCapabilities schema.
          </ctl:assertion>
      <ctl:comment xmlns="">Table 15. GetCapabilities UpdateSequence Equal Value</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.2.2 Table 4 and 7.3.4.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <ctl:message select="concat('EqualUpdateSequenceValue is |', $EqualUpdateSequenceValue, '|')"/>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
	      <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="updateSequence">
                <xsl:value-of select="$EqualUpdateSequenceValue"/>
              </ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS" updateSequence ="{$EqualUpdateSequenceValue}">
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)!=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Bogus_Value">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that if the server supports UpdateSequence, when a
           GetCapabilities request with an UpdateSequence parameter with a value
           equal to a bogus value is submitted, the response is valid XML that
           validates against the WCS 1.1.1 GetCapabilities schema. The bogus value
           is one that is not a valid value in the server's updateSequence set
           of values. The value is supplied by the user.
          </ctl:assertion>
      <ctl:comment xmlns="">Table 16. GetCapabilities UpdateSequence Bogus Value</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.2.2 Table 4 and 7.3.4.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <ctl:message select="concat('BogusUpdateSequenceValue is |', $BogusUpdateSequenceValue, '|')"/>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
	      <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="updateSequence">
                <xsl:value-of select="$BogusUpdateSequenceValue"/>
              </ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS" updateSequence ="{$BogusUpdateSequenceValue}">
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Lowest_Value">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that if the server supports UpdateSequence, when a
           GetCapabilities request with an UpdateSequence parameter with a value
           equal to the lowest possible value of the server's updateSequence set
           of values is submitted, the response is valid XML that validates
           against the WCS 1.1.1 GetCapabilities schema. The value is
           supplied by the user.</ctl:assertion>
      <ctl:comment xmlns="">Table 17. GetCapabilities UpdateSequence Lowest Value</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.2.2 Table 4 and 7.3.4.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <ctl:message select="concat('MinimalUpdateSequenceValue is |', $MinimalUpdateSequenceValue, '|')"/>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
	      <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="updateSequence">
                <xsl:value-of select="$MinimalUpdateSequenceValue"/>
              </ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS" updateSequence ="{$MinimalUpdateSequenceValue}">
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_UpdateSequence_Highest_Value">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that if the server supports UpdateSequence, when a
           GetCapabilities request with an UpdateSequence parameter with a value
           equal to the highest possible value of the server's updateSequence
           set of values is submitted, the response is valid XML that validates
           against the OWS Common 1.1.0 ExceptionReport schema. The value is
           supplied by the user.</ctl:assertion>
      <ctl:comment xmlns="">Table 18. GetCapabilities UpdateSequence Highest Value</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.2.2 Table 4 and 7.3.4.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <ctl:message select="concat('MaximalUpdateSequenceValue is |', $MaximalUpdateSequenceValue, '|')"/>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
	      <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="updateSequence">
                <xsl:value-of select="$MaximalUpdateSequenceValue"/>
              </ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS" updateSequence ="{$MaximalUpdateSequenceValue}">
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_AcceptFormats_TextXML">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that when a GetCapabilities request with an AcceptFormats
           parameter with a value of MIME type text/xml is submitted, the response
           is valid XML that validates against the WCS 1.1.1 GetCapabilities schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 19. GetCapabilities AcceptFormats Text/XML</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.2.2 Table 4 and 7.3.5.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
	      <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="acceptformats">text/xml</ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS">
                  <ows:AcceptFormats>
                    <ows:OutputFormat>text/xml</ows:OutputFormat>
                  </ows:AcceptFormats>
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_AcceptFormats_TextBogus">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="EqualUpdateSequenceValue"/>
      <ctl:param name="BogusUpdateSequenceValue"/>
      <ctl:param name="MinimalUpdateSequenceValue"/>
      <ctl:param name="MaximalUpdateSequenceValue"/>
      <ctl:assertion xmlns="">Verify that when a GetCapabilities request with an AcceptFormats
           parameter wiith a value of MIME type text/bogus is submitted, the
           response is valid XML that validates against the WCS 1.1.1
           GetCapabilities schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 20. GetCapabilities AcceptFormats Text/Bogus</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.2.2 Table 4 and 7.3.5.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCapabilities</ctl:param>
	      <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="acceptformats">text/bogus</ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <GetCapabilities xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS">
                  <ows:AcceptFormats>
                    <ows:OutputFormat>text/bogus</ows:OutputFormat>
                  </ows:AcceptFormats>
                </GetCapabilities>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_ServiceIdentification">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains a ServiceIdentification section that validates against the
           OWS Common 1.1.0 ServiceIdentification schema.
          </ctl:assertion>
      <ctl:comment xmlns="">Table 21. GetCapabilities Response ServiceIdentification</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.4.4 and 7.4.9.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_ServiceProvider">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains a ServiceProvider section that validates against the OWS
           Common 1.1.0 ServiceProvider schema.
          </ctl:assertion>
      <ctl:comment xmlns="">Table 22. GetCapabilities Response ServiceProvider</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.4.5 and 7.4.9.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains an OperationsMetadata section that validates against the OWS
           Common 1.1.0 OperationsMetadata schema.
          </ctl:assertion>
      <ctl:comment xmlns="">Table 23. GetCapabilities Response OperationsMetadata</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 8.3.1 and 8.3.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclauses 7.4.6, 7.4.7 and 7.4.9.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Required_Attributes">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains an OperationsMetadata section that has the three mandatory
           values of the XML attributes.</ctl:assertion>
      <ctl:comment xmlns="">Table 24. GetCapabilities Response OperationsMetadata Required Attributes</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.2.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 7.4.7.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities'])">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities']"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='DescribeCoverage'])">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='DescribeCoverage']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='DescribeCoverage']"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCoverage'])">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCoverage']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCoverage']"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Post_Encoding">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains an OperationsMetadata section for DCP HTTP Post transfers,
           the PostEncoding constraint is specified.</ctl:assertion>
      <ctl:comment xmlns="">Table 25. GetCapabilities Response OperationsMetadata Post Encoding</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.2.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding'])">
          <ctl:message/>
          <ctl:message>Could not extract an element from the response, but this is not a failure.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding']"/></ctl:message>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='SOAP')">
          <ctl:message/>
          <ctl:message>Could not extract an element from the response, but this is not a failure.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='SOAP'</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='SOAP'"/></ctl:message>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='XML')">
          <ctl:message/>
          <ctl:message>Could not extract an element from the response, but this is not a failure.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='XML'</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='XML'"/></ctl:message>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='SOAP')">
          <ctl:message/>
          <ctl:message>Could not extract an element from the response, but this is not a failure.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='SOAP'</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='SOAP'"/></ctl:message>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='XML')">
          <ctl:message/>
          <ctl:message>Could not extract an element from the response, but this is not a failure.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='XML'</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='XML'"/></ctl:message>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Post_Multiple_Connect_Points">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains an OperationsMetadata section for DCP HTTP Post transfers,
           that multiple encoding constraints with multiple connect
           point URLs is valid.</ctl:assertion>
      <ctl:comment xmlns="">Table 26. GetCapabilities Response OperationsMetadata Post Multiple Connect Points</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.2.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Constraint'][@name='PostEncoding'])">
          <ctl:message/>
          <ctl:message>Could not extract an element from the response, but this is not a failure.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Constraint'][@name='PostEncoding']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Constraint'][@name='PostEncoding']"/></ctl:message>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding'])">
          <ctl:message/>
          <ctl:message>Could not extract an element from the response, but this is not a failure.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding']"/></ctl:message>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/@xlink:href)">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/@xlink:href</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCapabilities']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/@xlink:href"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Store_Parameter">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains an OperationsMetadata section that indicates whether the
           store parameter is implemented in GetCoverage requests.</ctl:assertion>
      <ctl:comment xmlns="">Table 27. GetCapabilities Response OperationsMetadata Store Parameter</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.2.3.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCoverage']/*[local-name()='Parameter'][@name='store'])">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCoverage']/*[local-name()='Parameter'][@name='store']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCoverage']/*[local-name()='Parameter'][@name='store']"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCoverage']/*[local-name()='Parameter'][@name='store']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='False')">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCoverage']/*[local-name()='Parameter'][@name='store']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='False'</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Operation'][@name='GetCoverage']/*[local-name()='Parameter'][@name='store']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='False'"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains an OperationsMetadata section that contains a Contents section.</ctl:assertion>
      <ctl:comment xmlns="">Table 28. GetCapabilities Response OperationsMetadata Contents</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.3.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents'])">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains an OperationsMetadata section that contains a Contents
           section with a CoverageSummary.</ctl:assertion>
      <ctl:comment xmlns="">Table 29. GetCapabilities Response OperationsMetadata Contents CoverageSummary</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 8.3.3.1 and 8.3.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents'])">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'])">
          <ctl:message/>
          <ctl:message>Could not extract an element from the response, but this is not a failure.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']"/></ctl:message>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='OtherSource'])">
          <ctl:message/>
          <ctl:message>Could not extract an element from the response, but this is not a failure.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='OtherSource']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='OtherSource']"/></ctl:message>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_SupportedCRS">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains an OperationsMetadata section that contains a Contents
           section with SupportedCRS that is a union
           of the nested CoverageSummaries.</ctl:assertion>
      <ctl:comment xmlns="">Table 30. GetCapabilities Response OperationsMetadata Contents SupportedCRS</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.3.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents'])">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='SupportedCRS'])">
          <ctl:message/>
          <ctl:message>Could not extract an element from the response, but this is not a failure.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='SupportedCRS']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='SupportedCRS']"/></ctl:message>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_SupportedFormat">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains an OperationsMetadata section that contains a Contents
           section with SupportedFormat that is a union of
           the nested CoverageSummaries.</ctl:assertion>
      <ctl:comment xmlns="">Table 31. GetCapabilities Response OperationsMetadata Contents SupportedFormat</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.3.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='SupportedFormat'])">
          <ctl:message/>
          <ctl:message>Could not extract an element from the response, but this is not a failure.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='SupportedFormat']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='SupportedFormat']"/></ctl:message>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_Title">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains an OperationsMetadata section that contains a Contents
           section. If there are CoverageSummaries then each one has a title.</ctl:assertion>
      <ctl:comment xmlns="">Table 32. GetCapabilities Response OperationsMetadata Contents CoverageSummary Title</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 10.6.1 Figure 12.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'])">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']/*[1][local-name()!='Title']">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']/*[1][local-name()!='Title']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']/*[1][local-name()!='Title']"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_Abstract">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains an OperationsMetadata section that contains a Contents
           section. If there are CoverageSummaries then each one has an abstract.</ctl:assertion>
      <ctl:comment xmlns="">Table 33. GetCapabilities Response OperationsMetadata Contents CoverageSummary Abstract</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 10.6.1 Figure 12.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'])">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']/*[local-name()='Abstract'])">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']/*[local-name()='Abstract']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']/*[local-name()='Abstract']"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_SupportedFormat">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains an OperationsMetadata section that contains a Contents
           section. If there are CoverageSummaries then each one has at
           least one supportedFormat listed or inherited.</ctl:assertion>
      <ctl:comment xmlns="">Table 34. GetCapabilities Response OperationsMetadata Contents CoverageSummary SupportedFormat</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.3.2 Table 5.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'])">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']/*[local-name()='SupportedFormat'])">
          <ctl:message/>
          <ctl:message>Could not extract an element from the response, but this is not a failure.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']/*[local-name()='SupportedFormat']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']/*[local-name()='SupportedFormat']"/></ctl:message>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_SupportedCRS">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains an OperationsMetadata section that contains a Contents
           section. If there are CoverageSummaries then each one has at least
           one supportedCRS listed or inherited.</ctl:assertion>
      <ctl:comment xmlns="">Table 35. GetCapabilities Response OperationsMetadata Contents CoverageSummary SupportedCRS</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.3.2 Table 5.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'])">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']/*[local-name()='SupportedCRS'])">
          <ctl:message/>
          <ctl:message>Could not extract an element from the response, but this is not a failure.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']/*[local-name()='SupportedCRS']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']/*[local-name()='SupportedCRS']"/></ctl:message>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_Identifier">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains an OperationsMetadata section that contains a Contents
           section. If there are CoverageSummaries then each one has either an
           identifier or a subsidiary CoverageSummary.</ctl:assertion>
      <ctl:comment xmlns="">Table 36. GetCapabilities Response OperationsMetadata Contents CoverageSummary Identifier</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.3.2 Table 5.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'])">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']/*[local-name()='Identifier'])">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']/*[local-name()='Identifier']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']/*[local-name()='Identifier']"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']//*[local-name()='CoverageSummary'])">
          <ctl:message/>
          <ctl:message>Could not extract an element from the response, but this is not a failure.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']//*[local-name()='CoverageSummary']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']//*[local-name()='CoverageSummary']"/></ctl:message>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_Identifier_XML">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains an OperationsMetadata section that contains a Contents
           section. If there are CoverageSummaries then each identifier must
           conform to XML syntax.</ctl:assertion>
      <ctl:comment xmlns="">Table 37. GetCapabilities Response OperationsMetadata Contents CoverageSummary Identifier XML</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 8.3.3.3 and 7.4.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 11.3.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'])">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_SupportedFormat_XML">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains an OperationsMetadata section that contains a Contents
           section. If there are CoverageSummaries then each SupportedFormat
           must conform to XML syntax.</ctl:assertion>
      <ctl:comment xmlns="">Table 38. GetCapabilities Response OperationsMetadata Contents CoverageSummary SupportedFormat XML</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 8.3.3.3 and 7.4.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 11.3.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'])">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCapabilities_Response_OperationsMetadata_Contents_CoverageSummary_Identifier_Unique">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:assertion xmlns="">Verify that the service metadata document is valid XML that
           contains an OperationsMetadata section that contains a Contents
           section. If there are CoverageSummaries then each identifier
           must be unique for this server.</ctl:assertion>
      <ctl:comment xmlns="">Table 39. GetCapabilities Response OperationsMetadata Contents CoverageSummary Identifier Unique</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 8.3.3.4.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:variable name="get-result">
          <ctl:call-function name="wcs:get-capabilities-accept-versions">
            <ctl:with-param name="url" select="$url"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$get-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A GetCapabilities AcceptVersions initial test case failed. The error is ', $get-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:if test="not($get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'])">
          <ctl:message/>
          <ctl:message>Test failed because an element is missing from the response.</ctl:message>
          <ctl:message>extraction is $get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']</ctl:message>
          <ctl:message>response-extract is <xsl:value-of select="$get-result/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary']"/></ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
  </ctl:package>
  <ctl:package>
    <ctl:test xmlns="" name="wcs:DescribeCoverage-main">
      <ctl:param name="url"/>
      <ctl:assertion>All assertions for "DescribeCoverage" conformance are satisfied.</ctl:assertion>
      <ctl:comment>Test driver for the DescribeCoverage module.</ctl:comment>
      <ctl:link xmlns="" title="2. WCS-DescribeCoverage">http://www.opengeospatial.org/standards/wcs#DescribeCoverage</ctl:link>
      <ctl:code>
        <ctl:comment>From the GetCapabilities, which http methods are supported and what are their URLs</ctl:comment>
        <xsl:variable name="result1">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>GET</ctl:method>
            <ctl:param name="service">WCS</ctl:param>
            <ctl:param name="request">GetCapabilities</ctl:param>
	    <ctl:param name="version">1.1.1</ctl:param>
            <ctl:param name="sections">OperationsMetadata,Contents</ctl:param>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:variable name="version-number" select="$result1/*[local-name()='Capabilities'][@version]/@version"/>
        <xsl:choose>
          <xsl:when test="$version-number = '1.1.1'">
            <ctl:message select="concat('The service metadata document version number is ', $version-number, '.')"/>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('&#xA;', ' ')"/>
            <ctl:message select="concat('The service metadata document has version ', $version-number, ' but expected to find 1.1.1 as the highest protocol supported. See OGC 06-121r3 subclause 7.3.2.')"/>
            <ctl:message select="concat('&#xA;', ' ')"/>
            <ctl:fail/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="EqualUpdateSequenceValue">
          <xsl:value-of select="$result1/*[local-name()='Capabilities'][@updateSequence]/@updateSequence"/>
        </xsl:variable>
        <xsl:variable name="http-get">GET</xsl:variable>
        <xsl:variable name="http-xml">XML</xsl:variable>
        <xsl:variable name="http-soap">SOAP</xsl:variable>
        <xsl:variable name="url-get">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='DescribeCoverage']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Get']/@xlink:href"/>
        </xsl:variable>
        <xsl:variable name="url-xml">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='DescribeCoverage']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/@xlink:href"/>
        </xsl:variable>
        <xsl:variable name="xml-supported">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='DescribeCoverage']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='XML'"/>
        </xsl:variable>
        <xsl:variable name="xml-supported-alternate">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='XML'"/>
        </xsl:variable>
        <xsl:variable name="soap-supported">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='DescribeCoverage']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='SOAP'"/>
        </xsl:variable>
        <xsl:variable name="store-supported">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='GetCoverage']/*[local-name()='Parameter'][@name='store']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='True'"/>
        </xsl:variable>
        <xsl:variable name="sections-supported">
          <xsl:value-of select="$result1/*[local-name()='Capabilities'] and not($result1/*[local-name()='Capabilities']/*[local-name()='ServiceProvider'])"/>
        </xsl:variable>
        <xsl:variable name="identifier1">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'][1]/*[local-name()='Identifier']"/>
        </xsl:variable>
        <xsl:variable name="identifier2">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'][2]/*[local-name()='Identifier']"/>
        </xsl:variable>
        <xsl:variable name="identifier3">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'][3]/*[local-name()='Identifier']"/>
        </xsl:variable>
        <xsl:if test="string-length($version-number) = 0 and string-length($url-get) = 0 and string-length($identifier1) = 0">
          <ctl:message>The server seems to have a problem with handling the GetCapabilities sections parameter. No tests will be performed.</ctl:message>
          <ctl:fail/>
        </xsl:if>
        <ctl:message select="concat('The URL for KVP encoding is ', $url-get, '.')"/>
        <ctl:message select="concat('The URL for XML encoding is ', $url-xml, '.')"/>
        <xsl:choose>
          <xsl:when test="$xml-supported = 'true' or $xml-supported-alternate = 'true'">
            <ctl:message>XML encoding is supported.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message>XML encoding is not supported.</ctl:message>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:if test="$soap-supported = 'true'">
          <ctl:message>No tests using SOAP encoding will be performed. The tests for SOAP encoding are not implemented.</ctl:message>
        </xsl:if>
        <ctl:message select="concat('Identifier1 is ', $identifier1, '.')"/>
        <ctl:message select="concat('Identifier2 is ', $identifier2, '.')"/>
        <ctl:message select="concat('Identifier3 is ', $identifier3, '.')"/>
        <xsl:variable name="MinimalUpdateSequenceValue">0</xsl:variable>
        <xsl:variable name="MaximalUpdateSequenceValue">0</xsl:variable>
        <xsl:variable name="BogusUpdateSequenceValue">0</xsl:variable>
        <ctl:comment>Call the test for each applicable http method with its appropriate URL</ctl:comment>
        <xsl:if test="string-length($version-number) != 0 or string-length($url-get) != 0 or string-length($identifier1) != 0">
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('MinimalRequest', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('MinimalRequest', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('MinimalRequest', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:DescribeCoverage_MinimalRequest">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'MinimalRequest', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:DescribeCoverage_MinimalRequest">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'MinimalRequest', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('MissingVersion', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('MissingVersion', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('MissingVersion', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:DescribeCoverage_MissingVersion">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'MissingVersion', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:DescribeCoverage_MissingVersion">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'MissingVersion', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('MissingIdentifier', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('MissingIdentifier', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('MissingIdentifier', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:DescribeCoverage_MissingIdentifier">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'MissingIdentifier', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:DescribeCoverage_MissingIdentifier">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'MissingIdentifier', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('MultipleIdentifiers', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('MultipleIdentifiers', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('MultipleIdentifiers', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:DescribeCoverage_MultipleIdentifiers">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'MultipleIdentifiers', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:DescribeCoverage_MultipleIdentifiers">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'MultipleIdentifiers', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('EmptyIdentifier', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('EmptyIdentifier', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('EmptyIdentifier', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:DescribeCoverage_EmptyIdentifier">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'EmptyIdentifier', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:DescribeCoverage_EmptyIdentifier">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'EmptyIdentifier', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('BogusIdentifier', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('BogusIdentifier', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('BogusIdentifier', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:DescribeCoverage_BogusIdentifier">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'BogusIdentifier', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:DescribeCoverage_BogusIdentifier">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'BogusIdentifier', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('ValidWithBogusIdentifiers', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('ValidWithBogusIdentifiers', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('ValidWithBogusIdentifiers', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:DescribeCoverage_ValidWithBogusIdentifiers">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'ValidWithBogusIdentifiers', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:DescribeCoverage_ValidWithBogusIdentifiers">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'ValidWithBogusIdentifiers', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_InterpolationMethods', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_InterpolationMethods', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_InterpolationMethods', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:DescribeCoverage_Response_InterpolationMethods">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'Response_InterpolationMethods', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:DescribeCoverage_Response_InterpolationMethods">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'Response_InterpolationMethods', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_Identifier_XML', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_Identifier_XML', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_Identifier_XML', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:DescribeCoverage_Response_Identifier_XML">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'Response_Identifier_XML', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:DescribeCoverage_Response_Identifier_XML">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'Response_Identifier_XML', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_SupportedFormat_XML', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_SupportedFormat_XML', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_SupportedFormat_XML', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:DescribeCoverage_Response_SupportedFormat_XML">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'Response_SupportedFormat_XML', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:DescribeCoverage_Response_SupportedFormat_XML">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'Response_SupportedFormat_XML', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_FieldIdentifier_XML', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_FieldIdentifier_XML', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_FieldIdentifier_XML', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:DescribeCoverage_Response_FieldIdentifier_XML">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'Response_FieldIdentifier_XML', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:DescribeCoverage_Response_FieldIdentifier_XML">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'Response_FieldIdentifier_XML', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_InterpolationMethod_XML', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_InterpolationMethod_XML', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_InterpolationMethod_XML', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:DescribeCoverage_Response_InterpolationMethod_XML">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'Response_InterpolationMethod_XML', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:DescribeCoverage_Response_InterpolationMethod_XML">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'Response_InterpolationMethod_XML', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_AxisIdentifier_XML', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_AxisIdentifier_XML', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_AxisIdentifier_XML', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:DescribeCoverage_Response_AxisIdentifier_XML">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'Response_AxisIdentifier_XML', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:DescribeCoverage_Response_AxisIdentifier_XML">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'Response_AxisIdentifier_XML', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Response_AxisKey_XML', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Response_AxisKey_XML', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Response_AxisKey_XML', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:DescribeCoverage_Response_AxisKey_XML">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'Response_AxisKey_XML', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:DescribeCoverage_Response_AxisKey_XML">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'DescribeCoverage', '_', 'Response_AxisKey_XML', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:DescribeCoverage_MinimalRequest">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a DescribeCoverage request with only mandatory
           parameters is submitted, the response is valid XML that validates
           against the WCS 1.1.1 DescribeCoverage schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 40. DescribeCoverage Minimal Request</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 9.2.1">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">DescribeCoverage</ctl:param>
              <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="identifiers">
                <xsl:value-of select="$identifier1"/>
              </ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <DescribeCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS" version ="1.1.1"><Identifier><xsl:value-of select="$identifier1"/></Identifier>
                </DescribeCoverage>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:DescribeCoverage_MissingVersion">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a DescribeCoverage request with a missing version
           parameter is submitted, the response is valid XML that validates
           against the OWS Common 1.1.0 ExceptionReport schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 41. DescribeCoverage Missing Version</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 9.2.1 and 9.4 Table 20">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">DescribeCoverage</ctl:param>
	      <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="identifiers">
                <xsl:value-of select="$identifier1"/>
              </ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <DescribeCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS"><Identifier><xsl:value-of select="$identifier1"/></Identifier>
                </DescribeCoverage>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:DescribeCoverage_MissingIdentifier">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a DescribeCoverage request with a missing
           identifier parameter is submitted, the response is valid XML that
           validates against the OWS Common 1.1.0 ExceptionReport schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 42. DescribeCoverage Missing Identifer</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 9.2.1 and 9.4 Table 20">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">DescribeCoverage</ctl:param>
              <ctl:param name="version">1.1.1</ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <DescribeCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS" version ="1.1.1">
                </DescribeCoverage>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:DescribeCoverage_MultipleIdentifiers">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a DescribeCoverage request with multiple
           identifier parameters is submitted, the response is valid XML that
           validates against the WCS 1.1.1 DescribeCoverage schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 43. DescribeCoverage Multiple Identifiers</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 9.2.1">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">DescribeCoverage</ctl:param>
              <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="identifiers">
                <xsl:value-of select="concat($identifier1, ',', $identifier2, ',', $identifier3)"/>
              </ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <DescribeCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS" version ="1.1.1"><Identifier><xsl:value-of select="$identifier1"/></Identifier><Identifier><xsl:value-of select="$identifier2"/></Identifier><Identifier><xsl:value-of select="$identifier3"/></Identifier>
                </DescribeCoverage>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:DescribeCoverage_EmptyIdentifier">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a DescribeCoverage request with an empty
           identifier parameter is submitted, the response is valid XML that
           validates against the OWS Common 1.1.0 ExceptionReport schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 44. DescribeCoverage Empty Identifier</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 9.2.1 and 9.4 Table 20">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">DescribeCoverage</ctl:param>
              <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="identifiers"/>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <DescribeCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS" version ="1.1.1"><Identifier></Identifier>
                </DescribeCoverage>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:DescribeCoverage_BogusIdentifier">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a DescribeCoverage request with a bogus identifier
           parameter is submitted, the response is valid XML that validates
           against the OWS Common 1.1.0 ExceptionReport schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 45. DescribeCoverage Bogus Identifier</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 9.2.1 and 9.4 Table 20">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">DescribeCoverage</ctl:param>
              <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="identifiers">Bogus</ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <DescribeCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS" version ="1.1.1"><Identifier>Bogus</Identifier>
                </DescribeCoverage>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:DescribeCoverage_ValidWithBogusIdentifiers">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a DescribeCoverage request with a valid identifier
           and a bogus identifier parameter is submitted, the response is valid
           XML that validates against the OWS Common 1.1.0 ExceptionReport schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 46. DescribeCoverage Bogus With Valid Identifiers</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 9.2.1 and 9.4 Table 20">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="result">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>
              <xsl:choose>
                <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                <xsl:otherwise>POST</xsl:otherwise>
              </xsl:choose>
            </ctl:method>
            <xsl:if test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">DescribeCoverage</ctl:param>
              <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="identifiers">
                <xsl:value-of select="concat('Bogus,', $identifier1)"/>
              </ctl:param>
            </xsl:if>
            <xsl:if test="$http-method = 'XML' or $http-method = 'SOAP'">
              <ctl:body>
                <DescribeCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service = "WCS" version ="1.1.1"><Identifier>Bogus</Identifier><Identifier><xsl:value-of select="$identifier1"/></Identifier>
                </DescribeCoverage>
              </ctl:body>
            </xsl:if>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:if test="string-length($result)=0">
          <ctl:message>Parse error in test. Perhaps the response conforms to the wrong schema.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:DescribeCoverage_Response_InterpolationMethods">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a DescribeCoverage request with some identifiers
           is submitted, the response is valid XML that validates against the
           WCS 1.1.1 DescribeCoverage schema. The methods listed in the
           InterpolationMethods must be entries in the InterpolationMethods
           dictionary.</ctl:assertion>
      <ctl:comment xmlns="">Table 47. DescribeCoverage Response InterpolationMethods</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 9.3.1.3 Table 17 and H.3.1">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:variable name="describe-result">
          <ctl:call-function name="wcs:describe-coverage-multiple-identifiers">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier1" select="$identifier1"/>
            <ctl:with-param name="identifier2" select="$identifier2"/>
            <ctl:with-param name="identifier3" select="$identifier3"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$describe-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A DescribeCoverage MultipleIdentifiers initial test case failed. The error is ', $describe-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:for-each select="$describe-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='InterpolationMethods']/*[local-name()='InterpolationMethod']">
          <xsl:variable name="value" select="."/>
          <xsl:if test="not(contains('nearest, linear, quadratic, cubic, name', $value)) and not(./*[@codespace])">
            <ctl:message><xsl:value-of select="$value"/> should be one of nearest, linear, quadratic, cubic, none.</ctl:message>
            <ctl:fail/>
          </xsl:if>
        </xsl:for-each>
        <xsl:if test="not(contains('nearest, linear, quadratic, cubic, name', /*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='InterpolationMethods']/*[local-name()='Default']))">
          <ctl:message>$describe-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='InterpolationMethods']/*[local-name()='Default'] should be one of nearest, linear, quadratic, cubic, none.</ctl:message>
          <ctl:fail/>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:DescribeCoverage_Response_Identifier_XML">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a DescribeCoverage request with some identifiers
           is submitted, the response is valid XML that validates against the WCS
           1.1.1 DescribeCoverage schema. The identifier in the
           CoverageDescription must be usable literally as-is.</ctl:assertion>
      <ctl:comment xmlns="">Table 48. DescribeCoverage Response Identifier XML</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 9.3.2.3 a) and 7.4">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 11.3.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:variable name="describe-result">
          <ctl:call-function name="wcs:describe-coverage-multiple-identifiers">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier1" select="$identifier1"/>
            <ctl:with-param name="identifier2" select="$identifier2"/>
            <ctl:with-param name="identifier3" select="$identifier3"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$describe-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A DescribeCoverage MultipleIdentifiers initial test case failed. The error is ', $describe-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:for-each select="$describe-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Identifier']">
          <xsl:variable name="value" select="."/>
        </xsl:for-each>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:DescribeCoverage_Response_SupportedFormat_XML">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a DescribeCoverage request with some identifiers
           is submitted, the response is valid XML that validates against the
           WCS 1.1.1 DescribeCoverage schema. The supportedFormat in the
           CoverageDescription must be usable literally as-is.</ctl:assertion>
      <ctl:comment xmlns="">Table 49. DescribeCoverage Response SupportedFormat XML</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 9.3.2.3 b) and 7.4">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 11.3.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:variable name="describe-result">
          <ctl:call-function name="wcs:describe-coverage-multiple-identifiers">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier1" select="$identifier1"/>
            <ctl:with-param name="identifier2" select="$identifier2"/>
            <ctl:with-param name="identifier3" select="$identifier3"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$describe-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A DescribeCoverage MultipleIdentifiers initial test case failed. The error is ', $describe-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:for-each select="$describe-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']">
          <xsl:variable name="value" select="."/>
        </xsl:for-each>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:DescribeCoverage_Response_FieldIdentifier_XML">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a DescribeCoverage request with some identifiers
           is submitted, the response is valid XML that validates against the WCS
           1.1.1 DescribeCoverage schema. The identifier in the Field section of
           the Range section in the CoverageDescription
           must be usable literally as-is.</ctl:assertion>
      <ctl:comment xmlns="">Table 50. DescribeCoverage Response FieldIdentifier XML</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 9.3.2.3 c) and 7.4">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 11.3.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:variable name="describe-result">
          <ctl:call-function name="wcs:describe-coverage-multiple-identifiers">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier1" select="$identifier1"/>
            <ctl:with-param name="identifier2" select="$identifier2"/>
            <ctl:with-param name="identifier3" select="$identifier3"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$describe-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A DescribeCoverage MultipleIdentifiers initial test case failed. The error is ', $describe-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:for-each select="$describe-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']">
          <xsl:variable name="value" select="."/>
        </xsl:for-each>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:DescribeCoverage_Response_InterpolationMethod_XML">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a DescribeCoverage request with some identifiers
           is submitted, the response is valid XML that validates against the WCS
           1.1.1 DescribeCoverage schema. The interpolationMethod in the
           InterpolationMethods section of the Field section of the Range section
           in the CoverageDescription must be usable literally as-is.</ctl:assertion>
      <ctl:comment xmlns="">Table 51. DescribeCoverage Response InterpolationMethod XML</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 9.3.2.3 d) and 7.4">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 11.3.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:variable name="describe-result">
          <ctl:call-function name="wcs:describe-coverage-multiple-identifiers">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier1" select="$identifier1"/>
            <ctl:with-param name="identifier2" select="$identifier2"/>
            <ctl:with-param name="identifier3" select="$identifier3"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$describe-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A DescribeCoverage MultipleIdentifiers initial test case failed. The error is ', $describe-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:for-each select="$describe-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='InterpolationMethods']/*[local-name()='InterpolationMethod']">
          <xsl:variable name="value" select="."/>
        </xsl:for-each>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:DescribeCoverage_Response_AxisIdentifier_XML">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a DescribeCoverage request with some identifiers
           is submitted, the response is valid XML that validates against the WCS
           1.1.1 DescribeCoverage schema. The identifier in the Axis section of
           the Range section in the CoverageDescription
           must be usable literally as-is.</ctl:assertion>
      <ctl:comment xmlns="">Table 52. DescribeCoverage Response AxisIdentifier XML</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 9.3.2.3 e) and 7.4">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 11.3.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:variable name="describe-result">
          <ctl:call-function name="wcs:describe-coverage-multiple-identifiers">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier1" select="$identifier1"/>
            <ctl:with-param name="identifier2" select="$identifier2"/>
            <ctl:with-param name="identifier3" select="$identifier3"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$describe-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A DescribeCoverage MultipleIdentifiers initial test case failed. The error is ', $describe-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:for-each select="$describe-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis'][@name = 'identifier']">
          <xsl:variable name="value" select="."/>
        </xsl:for-each>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:DescribeCoverage_Response_AxisKey_XML">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a DescribeCoverage request with some identifiers
           is submitted, the response is valid XML that validates against the WCS
           1.1.1 DescribeCoverage schema. The key in the Axis section of the Range
           section in the CoverageDescription must be usable literally as-is.</ctl:assertion>
      <ctl:comment xmlns="">Table 53. DescribeCoverage Response AxisKey XML</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 9.3.2.3 f) and 7.4">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 11.3.">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:variable name="describe-result">
          <ctl:call-function name="wcs:describe-coverage-multiple-identifiers">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier1" select="$identifier1"/>
            <ctl:with-param name="identifier2" select="$identifier2"/>
            <ctl:with-param name="identifier3" select="$identifier3"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$describe-result/*[local-name()='ExceptionReport']">
          <ctl:message select="concat('A DescribeCoverage MultipleIdentifiers initial test case failed. The error is ', $describe-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
          <ctl:fail/>
        </xsl:if>
        <xsl:for-each select="$describe-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/*[local-name()='AvailableKeys']/*[local-name()='Key']">
          <xsl:variable name="value" select="."/>
        </xsl:for-each>
      </ctl:code>
    </ctl:test>
  </ctl:package>
  <ctl:package>
    <ctl:test xmlns="" name="wcs:GetCoverage-main">
      <ctl:param name="url"/>
      <ctl:assertion>All assertions for "GetCoverage" conformance are satisfied.</ctl:assertion>
      <ctl:comment>Test driver for the GetCoverage module.</ctl:comment>
      <ctl:link xmlns="" title="3. WCS-GetCoverage">http://www.opengeospatial.org/standards/wcs#GetCoverage</ctl:link>
      <ctl:code>
        <ctl:comment>From the GetCapabilities, which http methods are supported and what are their URLs</ctl:comment>
        <xsl:variable name="result1">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>GET</ctl:method>
            <ctl:param name="service">WCS</ctl:param>
            <ctl:param name="request">GetCapabilities</ctl:param>
	    <ctl:param name="version">1.1.1</ctl:param>
            <ctl:param name="sections">OperationsMetadata,Contents</ctl:param>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:variable name="version-number" select="$result1/*[local-name()='Capabilities'][@version]/@version"/>
        <xsl:choose>
          <xsl:when test="$version-number = '1.1.1'">
            <ctl:message select="concat('The service metadata document version number is ', $version-number, '.')"/>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('&#xA;', ' ')"/>
            <ctl:message select="concat('The service metadata document has version ', $version-number, ' but expected to find 1.1.1 as the highest protocol supported. See OGC 06-121r3 subclause 7.3.2.')"/>
            <ctl:message select="concat('&#xA;', ' ')"/>
            <ctl:fail/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="EqualUpdateSequenceValue">
          <xsl:value-of select="$result1/*[local-name()='Capabilities'][@updateSequence]/@updateSequence"/>
        </xsl:variable>
        <xsl:variable name="http-get">GET</xsl:variable>
        <xsl:variable name="http-xml">XML</xsl:variable>
        <xsl:variable name="http-soap">SOAP</xsl:variable>
        <xsl:variable name="url-get">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='GetCoverage']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Get']/@xlink:href"/>
        </xsl:variable>
        <xsl:variable name="url-xml">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='GetCoverage']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/@xlink:href"/>
        </xsl:variable>
        <xsl:variable name="xml-supported">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='GetCoverage']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='XML'"/>
        </xsl:variable>
        <xsl:variable name="xml-supported-alternate">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='XML'"/>
        </xsl:variable>
        <xsl:variable name="soap-supported">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='GetCoverage']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='SOAP'"/>
        </xsl:variable>
        <xsl:variable name="store-supported">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='GetCoverage']/*[local-name()='Parameter'][@name='store']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='True'"/>
        </xsl:variable>
        <xsl:variable name="sections-supported">
          <xsl:value-of select="$result1/*[local-name()='Capabilities'] and not($result1/*[local-name()='Capabilities']/*[local-name()='ServiceProvider'])"/>
        </xsl:variable>
        <xsl:variable name="identifier1">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'][1]/*[local-name()='Identifier']"/>
        </xsl:variable>
        <xsl:variable name="identifier2">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'][2]/*[local-name()='Identifier']"/>
        </xsl:variable>
        <xsl:variable name="identifier3">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='Contents']/*[local-name()='CoverageSummary'][3]/*[local-name()='Identifier']"/>
        </xsl:variable>
        <xsl:if test="string-length($version-number) = 0 and string-length($url-get) = 0 and string-length($identifier1) = 0">
          <ctl:message>The server seems to have a problem with handling the GetCapabilities sections parameter. No tests will be performed.</ctl:message>
          <ctl:fail/>
        </xsl:if>
        <ctl:message select="concat('The URL for KVP encoding is ', $url-get, '.')"/>
        <ctl:message select="concat('The URL for XML encoding is ', $url-xml, '.')"/>
        <xsl:choose>
          <xsl:when test="$xml-supported = 'true' or $xml-supported-alternate = 'true'">
            <ctl:message>XML encoding is supported.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message>XML encoding is not supported.</ctl:message>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:if test="$soap-supported = 'true'">
          <ctl:message>No tests using SOAP encoding will be performed. The tests for SOAP encoding are not implemented.</ctl:message>
        </xsl:if>
        <ctl:message select="concat('store supported is ', $store-supported = 'true', '.')"/>
        <ctl:message select="concat('Identifier1 is ', $identifier1, '.')"/>
        <ctl:message select="concat('Identifier2 is ', $identifier2, '.')"/>
        <ctl:message select="concat('Identifier3 is ', $identifier3, '.')"/>
        <xsl:variable name="MinimalUpdateSequenceValue">0</xsl:variable>
        <xsl:variable name="MaximalUpdateSequenceValue">0</xsl:variable>
        <xsl:variable name="BogusUpdateSequenceValue">0</xsl:variable>
        <ctl:comment>Call the test for each applicable http method with its appropriate URL</ctl:comment>
        <xsl:if test="string-length($version-number) != 0 or string-length($url-get) != 0 or string-length($identifier1) != 0">
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('MinimalRequest', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('MinimalRequest', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('MinimalRequest', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_MinimalRequest">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'MinimalRequest', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_MinimalRequest">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'MinimalRequest', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('MissingIdentifier', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('MissingIdentifier', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('MissingIdentifier', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_MissingIdentifier">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'MissingIdentifier', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_MissingIdentifier">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'MissingIdentifier', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('EmptyIdentifier', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('EmptyIdentifier', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('EmptyIdentifier', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_EmptyIdentifier">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'EmptyIdentifier', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_EmptyIdentifier">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'EmptyIdentifier', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('BogusIdentifier', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('BogusIdentifier', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('BogusIdentifier', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_BogusIdentifier">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'BogusIdentifier', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_BogusIdentifier">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'BogusIdentifier', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('MissingBoundingBox', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('MissingBoundingBox', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('MissingBoundingBox', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_MissingBoundingBox">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'MissingBoundingBox', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_MissingBoundingBox">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'MissingBoundingBox', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('SurroundingBoundingBox', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('SurroundingBoundingBox', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('SurroundingBoundingBox', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_SurroundingBoundingBox">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'SurroundingBoundingBox', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_SurroundingBoundingBox">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'SurroundingBoundingBox', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('InsideBoundingBox', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('InsideBoundingBox', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('InsideBoundingBox', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_InsideBoundingBox">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'InsideBoundingBox', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_InsideBoundingBox">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'InsideBoundingBox', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('OverlappingBoundingBox', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('OverlappingBoundingBox', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('OverlappingBoundingBox', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_OverlappingBoundingBox">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'OverlappingBoundingBox', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_OverlappingBoundingBox">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'OverlappingBoundingBox', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('BoundingBox_OutOfRangeCoordinates', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('BoundingBox_OutOfRangeCoordinates', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('BoundingBox_OutOfRangeCoordinates', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_BoundingBox_OutOfRangeCoordinates">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'BoundingBox_OutOfRangeCoordinates', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_BoundingBox_OutOfRangeCoordinates">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'BoundingBox_OutOfRangeCoordinates', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('OutsideBoundingBox', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('OutsideBoundingBox', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('OutsideBoundingBox', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_OutsideBoundingBox">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'OutsideBoundingBox', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_OutsideBoundingBox">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'OutsideBoundingBox', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('AntimeridianBoundingBox', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('AntimeridianBoundingBox', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('AntimeridianBoundingBox', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_AntimeridianBoundingBox">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'AntimeridianBoundingBox', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_AntimeridianBoundingBox">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'AntimeridianBoundingBox', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('TemporalSubset_TimePosition', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('TemporalSubset_TimePosition', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('TemporalSubset_TimePosition', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="describe-min-result2">
            <xsl:choose>
              <xsl:when test="$url-get">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-get"/>
                  <ctl:with-param name="http-method" select="$http-get"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
              <xsl:when test="$url-xml">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-xml"/>
                  <ctl:with-param name="http-method" select="$http-xml"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">
            <xsl:value-of select="not($describe-min-result2/*[local-name()='ExceptionReport']) and not(string-length($describe-min-result2/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='TemporalDomain']) = 0)"/>
          </xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePosition">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePosition', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePosition">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePosition', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('TemporalSubset_TimePosition_Early', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('TemporalSubset_TimePosition_Early', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('TemporalSubset_TimePosition_Early', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="describe-min-result2">
            <xsl:choose>
              <xsl:when test="$url-get">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-get"/>
                  <ctl:with-param name="http-method" select="$http-get"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
              <xsl:when test="$url-xml">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-xml"/>
                  <ctl:with-param name="http-method" select="$http-xml"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">
            <xsl:value-of select="not($describe-min-result2/*[local-name()='ExceptionReport']) and not(string-length($describe-min-result2/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='TemporalDomain']) = 0)"/>
          </xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePosition_Early">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePosition_Early', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePosition_Early">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePosition_Early', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('TemporalSubset_TimePosition_Late', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('TemporalSubset_TimePosition_Late', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('TemporalSubset_TimePosition_Late', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="describe-min-result2">
            <xsl:choose>
              <xsl:when test="$url-get">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-get"/>
                  <ctl:with-param name="http-method" select="$http-get"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
              <xsl:when test="$url-xml">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-xml"/>
                  <ctl:with-param name="http-method" select="$http-xml"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">
            <xsl:value-of select="not($describe-min-result2/*[local-name()='ExceptionReport']) and not(string-length($describe-min-result2/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='TemporalDomain']) = 0)"/>
          </xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePosition_Late">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePosition_Late', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePosition_Late">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePosition_Late', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('TemporalSubset_TimePeriod', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('TemporalSubset_TimePeriod', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('TemporalSubset_TimePeriod', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="describe-min-result2">
            <xsl:choose>
              <xsl:when test="$url-get">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-get"/>
                  <ctl:with-param name="http-method" select="$http-get"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
              <xsl:when test="$url-xml">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-xml"/>
                  <ctl:with-param name="http-method" select="$http-xml"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">
            <xsl:value-of select="not($describe-min-result2/*[local-name()='ExceptionReport']) and not(string-length($describe-min-result2/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='TemporalDomain']) = 0)"/>
          </xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePeriod', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePeriod', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('TemporalSubset_TimePeriod_With_Resolution', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('TemporalSubset_TimePeriod_With_Resolution', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('TemporalSubset_TimePeriod_With_Resolution', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="describe-min-result2">
            <xsl:choose>
              <xsl:when test="$url-get">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-get"/>
                  <ctl:with-param name="http-method" select="$http-get"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
              <xsl:when test="$url-xml">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-xml"/>
                  <ctl:with-param name="http-method" select="$http-xml"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">
            <xsl:value-of select="not($describe-min-result2/*[local-name()='ExceptionReport']) and not(string-length($describe-min-result2/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='TemporalDomain']) = 0)"/>
          </xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_With_Resolution">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePeriod_With_Resolution', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_With_Resolution">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePeriod_With_Resolution', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('TemporalSubset_TimePeriod_With_Resolution_And_Frame', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('TemporalSubset_TimePeriod_With_Resolution_And_Frame', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('TemporalSubset_TimePeriod_With_Resolution_And_Frame', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="describe-min-result2">
            <xsl:choose>
              <xsl:when test="$url-get">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-get"/>
                  <ctl:with-param name="http-method" select="$http-get"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
              <xsl:when test="$url-xml">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-xml"/>
                  <ctl:with-param name="http-method" select="$http-xml"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">
            <xsl:value-of select="not($describe-min-result2/*[local-name()='ExceptionReport']) and not(string-length($describe-min-result2/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='TemporalDomain']) = 0)"/>
          </xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_With_Resolution_And_Frame">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePeriod_With_Resolution_And_Frame', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_With_Resolution_And_Frame">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePeriod_With_Resolution_And_Frame', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('TemporalSubset_TimePeriod_BeginTime_Only', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('TemporalSubset_TimePeriod_BeginTime_Only', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('TemporalSubset_TimePeriod_BeginTime_Only', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="describe-min-result2">
            <xsl:choose>
              <xsl:when test="$url-get">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-get"/>
                  <ctl:with-param name="http-method" select="$http-get"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
              <xsl:when test="$url-xml">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-xml"/>
                  <ctl:with-param name="http-method" select="$http-xml"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">
            <xsl:value-of select="not($describe-min-result2/*[local-name()='ExceptionReport']) and not(string-length($describe-min-result2/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='TemporalDomain']) = 0)"/>
          </xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_BeginTime_Only">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePeriod_BeginTime_Only', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_BeginTime_Only">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePeriod_BeginTime_Only', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('TemporalSubset_TimePeriod_EndTime_Only', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('TemporalSubset_TimePeriod_EndTime_Only', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('TemporalSubset_TimePeriod_EndTime_Only', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="describe-min-result2">
            <xsl:choose>
              <xsl:when test="$url-get">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-get"/>
                  <ctl:with-param name="http-method" select="$http-get"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
              <xsl:when test="$url-xml">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-xml"/>
                  <ctl:with-param name="http-method" select="$http-xml"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">
            <xsl:value-of select="not($describe-min-result2/*[local-name()='ExceptionReport']) and not(string-length($describe-min-result2/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='TemporalDomain']) = 0)"/>
          </xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_EndTime_Only">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePeriod_EndTime_Only', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_EndTime_Only">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePeriod_EndTime_Only', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_Identifier', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_Identifier', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_Identifier', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Identifier">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Identifier', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Identifier">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Identifier', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_Multiple_Identifiers', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_Multiple_Identifiers', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_Multiple_Identifiers', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="describe-min-result2">
            <xsl:choose>
              <xsl:when test="$url-get">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-get"/>
                  <ctl:with-param name="http-method" select="$http-get"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
              <xsl:when test="$url-xml">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-xml"/>
                  <ctl:with-param name="http-method" select="$http-xml"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">
            <xsl:value-of select="not($describe-min-result2/*[local-name()='ExceptionReport']) and not(string-length($describe-min-result2/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier'][2]) = 0)"/>
          </xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Multiple_Identifiers">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Multiple_Identifiers', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Multiple_Identifiers">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Multiple_Identifiers', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_Repeated_Identifiers', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_Repeated_Identifiers', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_Repeated_Identifiers', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Repeated_Identifiers">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Repeated_Identifiers', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Repeated_Identifiers">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Repeated_Identifiers', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_Bogus_Identifier', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_Bogus_Identifier', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_Bogus_Identifier', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Bogus_Identifier">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Bogus_Identifier', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Bogus_Identifier">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Bogus_Identifier', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_Valid_With_Bogus_Identifiers', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_Valid_With_Bogus_Identifiers', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_Valid_With_Bogus_Identifiers', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Valid_With_Bogus_Identifiers">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Valid_With_Bogus_Identifiers', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Valid_With_Bogus_Identifiers">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Valid_With_Bogus_Identifiers', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_InterpolationMethod', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_InterpolationMethod', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_InterpolationMethod', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_InterpolationMethod">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_InterpolationMethod', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_InterpolationMethod">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_InterpolationMethod', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_InterpolationMethod_Missing', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_InterpolationMethod_Missing', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_InterpolationMethod_Missing', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_InterpolationMethod_Missing">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_InterpolationMethod_Missing', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_InterpolationMethod_Missing">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_InterpolationMethod_Missing', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_InterpolationMethod_Bogus', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_InterpolationMethod_Bogus', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_InterpolationMethod_Bogus', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_InterpolationMethod_Bogus">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_InterpolationMethod_Bogus', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_InterpolationMethod_Bogus">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_InterpolationMethod_Bogus', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_Axis_Identifier_One_Key', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_Axis_Identifier_One_Key', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_Axis_Identifier_One_Key', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_One_Key">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Axis_Identifier_One_Key', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_One_Key">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Axis_Identifier_One_Key', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_Axis_Identifier_Some_Keys', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_Axis_Identifier_Some_Keys', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_Axis_Identifier_Some_Keys', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_Some_Keys">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Axis_Identifier_Some_Keys', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_Some_Keys">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Axis_Identifier_Some_Keys', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_Axis_Identifier_All_Keys', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_Axis_Identifier_All_Keys', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_Axis_Identifier_All_Keys', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_All_Keys">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Axis_Identifier_All_Keys', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_All_Keys">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Axis_Identifier_All_Keys', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_Axis_Identifier_No_Key', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_Axis_Identifier_No_Key', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_Axis_Identifier_No_Key', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_No_Key">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Axis_Identifier_No_Key', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_No_Key">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Axis_Identifier_No_Key', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_Axis_Identifier_Bogus_Key', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_Axis_Identifier_Bogus_Key', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_Axis_Identifier_Bogus_Key', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_Bogus_Key">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Axis_Identifier_Bogus_Key', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_Bogus_Key">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Axis_Identifier_Bogus_Key', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_KVP_Syntax_Colon_Between_Field_Identifiers', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_KVP_Syntax_Colon_Between_Field_Identifiers', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_KVP_Syntax_Colon_Between_Field_Identifiers', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="describe-min-result2">
            <xsl:choose>
              <xsl:when test="$url-get">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-get"/>
                  <ctl:with-param name="http-method" select="$http-get"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
              <xsl:when test="$url-xml">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-xml"/>
                  <ctl:with-param name="http-method" select="$http-xml"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">
            <xsl:value-of select="not($describe-min-result2/*[local-name()='ExceptionReport']) and not(string-length($describe-min-result2/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier'][2]) = 0)"/>
          </xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Colon_Between_Field_Identifiers">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_KVP_Syntax_Colon_Between_Field_Identifiers', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_KVP_Syntax_Comma_Between_Field_Identifiers', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_KVP_Syntax_Comma_Between_Field_Identifiers', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_KVP_Syntax_Comma_Between_Field_Identifiers', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="describe-min-result2">
            <xsl:choose>
              <xsl:when test="$url-get">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-get"/>
                  <ctl:with-param name="http-method" select="$http-get"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
              <xsl:when test="$url-xml">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-xml"/>
                  <ctl:with-param name="http-method" select="$http-xml"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">
            <xsl:value-of select="not($describe-min-result2/*[local-name()='ExceptionReport']) and not(string-length($describe-min-result2/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier'][2]) = 0)"/>
          </xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Comma_Between_Field_Identifiers">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_KVP_Syntax_Comma_Between_Field_Identifiers', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_KVP_Syntax_Semicolon_Between_Field_Identifier_And_InterpolationMethod', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_KVP_Syntax_Semicolon_Between_Field_Identifier_And_InterpolationMethod', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_KVP_Syntax_Semicolon_Between_Field_Identifier_And_InterpolationMethod', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Semicolon_Between_Field_Identifier_And_InterpolationMethod">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_KVP_Syntax_Semicolon_Between_Field_Identifier_And_InterpolationMethod', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_KVP_Syntax_Semicolon_Between_Axis_Identifiers', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_KVP_Syntax_Semicolon_Between_Axis_Identifiers', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_KVP_Syntax_Semicolon_Between_Axis_Identifiers', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Semicolon_Between_Axis_Identifiers">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_KVP_Syntax_Semicolon_Between_Axis_Identifiers', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_KVP_Syntax_Semicolon_Between_Axis_Keys', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_KVP_Syntax_Semicolon_Between_Axis_Keys', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_KVP_Syntax_Semicolon_Between_Axis_Keys', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Semicolon_Between_Axis_Keys">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_KVP_Syntax_Semicolon_Between_Axis_Keys', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_KVP_Syntax_Missing_Opening_Square_Bracket_Before_Axis_Identifier', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_KVP_Syntax_Missing_Opening_Square_Bracket_Before_Axis_Identifier', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_KVP_Syntax_Missing_Opening_Square_Bracket_Before_Axis_Identifier', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Missing_Opening_Square_Bracket_Before_Axis_Identifier">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_KVP_Syntax_Missing_Opening_Square_Bracket_Before_Axis_Identifier', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_KVP_Syntax_Missing_Opening_Square_Bracket_Before_Axis_Key', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_KVP_Syntax_Missing_Opening_Square_Bracket_Before_Axis_Key', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_KVP_Syntax_Missing_Opening_Square_Bracket_Before_Axis_Key', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Missing_Opening_Square_Bracket_Before_Axis_Key">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_KVP_Syntax_Missing_Opening_Square_Bracket_Before_Axis_Key', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_KVP_Syntax_Missing_Closing_Square_Bracket', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_KVP_Syntax_Missing_Closing_Square_Bracket', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_KVP_Syntax_Missing_Closing_Square_Bracket', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Missing_Closing_Square_Bracket">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_KVP_Syntax_Missing_Closing_Square_Bracket', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Formats', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Formats', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Formats', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_Formats">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Formats', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_Formats">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Formats', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Bogus_Format', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Bogus_Format', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Bogus_Format', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_Bogus_Format">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Bogus_Format', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_Bogus_Format">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Bogus_Format', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Empty_Format', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Empty_Format', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Empty_Format', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_Empty_Format">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Empty_Format', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_Empty_Format">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Empty_Format', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Missing_Format', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Missing_Format', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Missing_Format', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_Missing_Format">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Missing_Format', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_Missing_Format">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Missing_Format', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Store_True', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Store_True', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Store_True', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_Store_True">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Store_True', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_Store_True">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Store_True', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Store_False', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Store_False', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Store_False', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_Store_False">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Store_False', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_Store_False">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Store_False', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Store_Bogus', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Store_Bogus', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Store_Bogus', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_Store_Bogus">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Store_Bogus', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_Store_Bogus">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
                <ctl:with-param name="identifier2" select="$identifier2"/>
                <ctl:with-param name="identifier3" select="$identifier3"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Store_Bogus', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_MinimalRequest">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with only mandatory parameters is submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 54. GetCoverage Minimal Request</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 10.2.1.1 Tables 21, 22 and 23.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_MissingIdentifier">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a missing identifier parameter is submitted, the response is valid XML that validates against the OWS Common 1.1.0 ExceptionReport schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 55. GetCoverage Missing Identifier</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22  and 23 and 10.3.2 Table 28.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' Identifier',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  Identifier but found
                                  <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_EmptyIdentifier">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with an empty identifier
           parameter is submitted, the response is valid XML that validates
           against the OWS Common 1.1.0 ExceptionReport schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 56. GetCoverage Empty Identifier</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23 and 10.3.2 Table 28.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier"/>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier/><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' Identifier',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  Identifier but found
                                  <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_BogusIdentifier">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a bogus identifier
           parameter is submitted, the response is valid XML that validates
           against the OWS Common 1.1.0 ExceptionReport schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 57. GetCoverage Bogus Identifier</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23 and 10.3.2 Table 28.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">Bogus</ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>Bogus</ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' Identifier',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  Identifier but found
                                  <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_MissingBoundingBox">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a missing BoundingBox
           parameter is submitted, the response is valid XML that validates
           against the OWS Common 1.1.0 ExceptionReport schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 58. GetCoverage Missing BoundingBox</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23 and 10.3.2 Table 28.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' BoundingBox',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  BoundingBox but found
                                 <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_SurroundingBoundingBox">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a BoundingBox parameter
           which totally surrounds the CoverageDescription BoundingBox is
           submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 59. GetCoverage Surrounding BoundingBox</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23 and 10.3.6.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 10.2">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX - $DeltaX, ',', $LowerCornerY - $DeltaY, ',', $UpperCornerX + $DeltaX, ',', $UpperCornerY + $DeltaY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="concat($LowerCornerX - $DeltaX, ' ', $LowerCornerY - $DeltaY)"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="concat($UpperCornerX + $DeltaX, ' ', $UpperCornerY + $DeltaY)"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_InsideBoundingBox">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a BoundingBox
           parameter which is totally inside the CoverageDescription BoundingBox
           is submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 60. GetCoverage Inside BoundingBox</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23 and 10.3.6.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 10.2">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX + $DeltaX, ',', $LowerCornerY + $DeltaY, ',', $UpperCornerX - $DeltaX, ',', $UpperCornerY - $DeltaY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="concat($LowerCornerX + $DeltaX, ' ', $LowerCornerY + $DeltaY)"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="concat($UpperCornerX - $DeltaX, ' ', $UpperCornerY - $DeltaY)"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_OverlappingBoundingBox">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a BoundingBox
           parameter which overlaps the CoverageDescription BoundingBox is
           submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 61. GetCoverage Overlapping BoundingBox</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23 and 10.3.6.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 10.2">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX + $DeltaX, ',', $LowerCornerY + $DeltaY, ',', $UpperCornerX + $DeltaX, ',', $UpperCornerY + $DeltaY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="concat($LowerCornerX + $DeltaX, ' ', $LowerCornerY + $DeltaY)"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="concat($UpperCornerX + $DeltaX, ' ', $UpperCornerY + $DeltaY)"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_BoundingBox_OutOfRangeCoordinates">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a BoundingBox
           parameter with coordinate values which are out of range is submitted,
           the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 62. GetCoverage BoundingBox Out Of Range Coordinates</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 7.6, 10.2.1.1 Tables 21, 22 and 23 and 10.3.6.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 10.2">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat('-1e20,-1e20,1e20,1e20,', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>-1e20 -1e20</ows11:LowerCorner><ows11:UpperCorner>1e20 1e20</ows11:UpperCorner></ows11:BoundingBox></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_OutsideBoundingBox">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a BoundingBox
           parameter which is totally outside and not overlapping the
           CoverageDescription BoundingBox is submitted, the response may or may
           not be an exception. The specification does not define the allowed response.</ctl:assertion>
      <ctl:comment xmlns="">Table 63. GetCoverage Outside BoundingBox</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 7.6, 10.2.1.1 Tables 21, 22 and 23 and 10.3.6.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 10.2">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX + $LengthX + $DeltaX, ',', $LowerCornerY + $LengthY + $DeltaY, ',', $UpperCornerX + $LengthX + $DeltaX, ',', $UpperCornerY + $LengthY + $DeltaY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="concat($LowerCornerX + $LengthX + $DeltaX, ' ', $LowerCornerY + $LengthY + $DeltaY)"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="concat($UpperCornerX + $LengthX + $DeltaX, ' ', $UpperCornerY + $LengthY + $DeltaY)"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_AntimeridianBoundingBox">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a BoundingBox
           parameter with coordinate values which span the antimeridian is
           submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 64. GetCoverage Antimeridian BoundingBox</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 7.6.2, 10.2.1.1 Tables 21, 22 and 23 and 10.3.6.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 10.2">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">179.5,10,-179.5,20,urn:ogc:def:crs:OGC:2:84</ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>179.5 10</ows11:LowerCorner><ows11:UpperCorner>-179.5 20</ows11:UpperCorner></ows11:BoundingBox></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePosition">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a TimePosition
           parameter from the CoverageDescription is submitted,
           the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 65. GetCoverage TemporalSubset TimePosition</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses10.2.1.1 Tables 21, 22 and 23; 9.3.1.2 Tables 13 and  14; and 9.3.2.4.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="TimePosition"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='TemporalDomain']/*[local-name()='TimePositionOrInterval']/*[local-name()='TimePosition']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="TimeSequence">
                      <xsl:value-of select="$TimePosition"/>
                    </ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox><TemporalSubset>
                            <gml:timePosition>
                              <xsl:value-of select="$TimePosition"/>
                            </gml:timePosition>
                          </TemporalSubset></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePosition_Early">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with an early TimePosition
           parameter is submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 66. GetCoverage TemporalSubset TimePosition Early</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses10.2.1.1 Tables 21, 22 and 23; 9.3.1.2 Tables 13 and  14; and 9.3.2.4.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="TimeSequence">-4000000000-01-01</ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox><TemporalSubset>
                            <gml:timePosition>-4000000000-01-01</gml:timePosition>
                          </TemporalSubset></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePosition_Late">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a late TimePosition
           parameter is submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 67. GetCoverage TemporalSubset TimePosition Late</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                       Subclauses10.2.1.1 Tables 21, 22 and 23; 9.3.1.2 Tables 13 and  14; and 9.3.2.4.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="TimeSequence">3000-07-01T23:00:10.456Z</ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox><TemporalSubset>
                            <gml:timePosition>3000-07-01T23:00:10.456Z</gml:timePosition>
                          </TemporalSubset></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with TimePeriod BeginTime
           and EndTime parameters is submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 68. GetCoverage TemporalSubset TimePeriod</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 9.3.1.2 Tables 13,  14 and 15; and 9.3.2.4.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="TimePosition"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='TemporalDomain']/*[local-name()='TimePositionOrInterval']/*[local-name()='TimePosition']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="TimeSequence">
                      <xsl:value-of select="concat(number(substring($TimePosition, 1, 4)) - 1, substring($TimePosition, 5))"/>
                      <xsl:value-of select="'/'"/>
                      <xsl:value-of select="concat(number(substring($TimePosition, 1, 4)) + 1, substring($TimePosition, 5))"/>
                    </ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox><TemporalSubset>
                            <gml:timePosition>
                              <xsl:value-of select="concat(number(substring($TimePosition, 1, 4)) - 1, substring($TimePosition, 5))"/>
                              <xsl:value-of select="'/'"/>
                              <xsl:value-of select="concat(number(substring($TimePosition, 1, 4)) + 1, substring($TimePosition, 5))"/>
                            </gml:timePosition>
                          </TemporalSubset></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_With_Resolution">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a TimePeriod with
           resolution is submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 69. GetCoverage TemporalSubset TimePeriod With Resolution</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                    Subclauses10.2.1.1 Tables 21, 22 and 23; 9.3.1.2 Tables 13,  14 and 15; and 9.3.2.4.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="TimePosition"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='TemporalDomain']/*[local-name()='TimePositionOrInterval']/*[local-name()='TimePosition']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="TimeSequence"><xsl:value-of select="concat(substring($TimePosition, 1, 5), max((number(substring($TimePosition, 6, 2)) - 2, 1)), substring($TimePosition, 8))"/><xsl:value-of select="'/'"/><xsl:value-of select="concat(substring($TimePosition, 1, 5), min((number(substring($TimePosition, 6, 2)) + 2, 12)), substring($TimePosition, 8))"/>/P1D</ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox><TemporalSubset>
                            <gml:timePosition><xsl:value-of select="concat(substring($TimePosition, 1, 5), max((number(substring($TimePosition, 6, 2)) - 2, 1)), substring($TimePosition, 8))"/><xsl:value-of select="'/'"/><xsl:value-of select="concat(substring($TimePosition, 1, 5), min((number(substring($TimePosition, 6, 2)) + 2, 12)), substring($TimePosition, 8))"/>/P1D</gml:timePosition>
                          </TemporalSubset></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_With_Resolution_And_Frame">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a TimePeriod with
           resolution and frame is submitted, the response
           is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 70. GetCoverage TemporalSubset TimePeriod With Resolution And Frame</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                    Subclauses10.2.1.1 Tables 21, 22 and 23; 9.3.1.2 Tables 13,  14 and 15; and 9.3.2.4.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="TimePosition"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='TemporalDomain']/*[local-name()='TimePositionOrInterval']/*[local-name()='TimePosition']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="TimeSequence"><xsl:value-of select="concat(substring($TimePosition, 1, 8), max((number(substring($TimePosition, 9, 2)) - 10, 1)), substring($TimePosition, 11))"/><xsl:value-of select="'/'"/><xsl:value-of select="concat(substring($TimePosition, 1, 8), min((number(substring($TimePosition, 9, 2)) + 10, 28)), substring($TimePosition, 11))"/>/PT6H</ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox><TemporalSubset>
                            <gml:timePosition><xsl:value-of select="concat(substring($TimePosition, 1, 8), max((number(substring($TimePosition, 9, 2)) - 10, 1)), substring($TimePosition, 11))"/><xsl:value-of select="'/'"/><xsl:value-of select="concat(substring($TimePosition, 1, 8), min((number(substring($TimePosition, 9, 2)) + 10, 28)), substring($TimePosition, 11))"/>/PT6H</gml:timePosition>
                          </TemporalSubset></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_BeginTime_Only">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a TimePeriod but just
           a BeginTime is submitted, the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 71. GetCoverage TemporalSubset TimePeriod BeginTime Only</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 9.3.1.2 Tables 13,  14 and 15; 9.3.2.4; and 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="TimePosition"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='TemporalDomain']/*[local-name()='TimePositionOrInterval']/*[local-name()='TimePosition']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="TimeSequence"><xsl:value-of select="concat(number(substring($TimePosition, 1, 4)) - 1, substring($TimePosition, 5))"/><xsl:value-of select="'/'"/></ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox><TemporalSubset>
                            <gml:timePosition><xsl:value-of select="concat(number(substring($TimePosition, 1, 4)) - 1, substring($TimePosition, 5))"/><xsl:value-of select="'/'"/></gml:timePosition>
                          </TemporalSubset></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' EndTime',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  EndTime but found
                                     <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_EndTime_Only">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a TimePeriod but
           just an EndTime is submitted, the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 72. GetCoverage TemporalSubset TimePeriod EndTime Only</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 9.3.1.2 Tables 13,  14 and 15; 9.3.2.4; and 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="TimePosition"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='TemporalDomain']/*[local-name()='TimePositionOrInterval']/*[local-name()='TimePosition']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="TimeSequence"><xsl:value-of select="'/'"/><xsl:value-of select="concat(number(substring($TimePosition, 1, 4)) + 1, substring($TimePosition, 5))"/></ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox><TemporalSubset>
                            <gml:timePosition><xsl:value-of select="'/'"/><xsl:value-of select="concat(number(substring($TimePosition, 1, 4)) + 1, substring($TimePosition, 5))"/></gml:timePosition>
                          </TemporalSubset></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' BeginTime',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  BeginTime but found
                                   <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_Identifier">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a RangeSubset
           Identifier is submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 73. GetCoverage RangeSubset Identifier</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24 and 25; and 9.3.1.3 Tables 16 and 17.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="FieldIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:value-of select="$FieldIdentifier"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><RangeSubset>
                          <FieldSubset>
                            <ows11:Identifier>
                              <xsl:value-of select="$FieldIdentifier"/>
                            </ows11:Identifier>
                          </FieldSubset>
                        </RangeSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_Multiple_Identifiers">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with RangeSubset
           Identifiers is submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 74. GetCoverage RangeSubset Multiple Identifiers</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24 and 25; and 9.3.1.3 Tables 16 and 17.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="FieldIdentifier1"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']"/></xsl:variable>
            <xsl:variable name="FieldIdentifier2"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier'][2]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:if test="string-length($FieldIdentifier2) = 0">
                        <ctl:message>FieldIdentifier2 is not found. Need to skip test.</ctl:message>
                      </xsl:if><xsl:value-of select="concat($FieldIdentifier1, ',', $FieldIdentifier2)"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><RangeSubset>
                          <FieldSubset>
                            <ctl:message>FieldIdentifier2 is not found. Need to skip test.</ctl:message>
                            <ctl:message select="concat('Length is ', string-length($FieldIdentifier2))"/>
                            <ows11:Identifier>
                              <xsl:value-of select="$FieldIdentifier1"/>
                            </ows11:Identifier>
                            <ows11:Identifier>
                              <xsl:value-of select="$FieldIdentifier2"/>
                            </ows11:Identifier>
                          </FieldSubset>
                        </RangeSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_Repeated_Identifiers">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a repeated RangeSubset
           Identifier is submitted, the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 75. GetCoverage RangeSubset Repeated Identifiers</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24 and 25; 9.3.1.3 Tables 16 and 17; 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="FieldIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:value-of select="concat($FieldIdentifier, ',', $FieldIdentifier)"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><RangeSubset>
                          <FieldSubset>
                            <ows11:Identifier>
                              <xsl:value-of select="$FieldIdentifier"/>
                            </ows11:Identifier>
                            <ows11:Identifier>
                              <xsl:value-of select="$FieldIdentifier"/>
                            </ows11:Identifier>
                          </FieldSubset>
                        </RangeSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' FieldSubset / Identifier',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  FieldSubset / Identifier but found
                                    <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_Bogus_Identifier">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a bogus RangeSubset
           Identifier is submitted, the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 76. GetCoverage RangeSubset Bogus Identifier</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24 and 25; 9.3.1.3 Tables 16 and 17; 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset">Bogus</ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><RangeSubset>
                          <FieldSubset>
                            <ows11:Identifier>Bogus</ows11:Identifier>
                          </FieldSubset>
                        </RangeSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' FieldSubset / Identifier',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  FieldSubset / Identifier but found
                                    <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_Valid_With_Bogus_Identifiers">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with one valid RangeSubset
           Identifier and one bogus Identifier is submitted,
           the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 77. GetCoverage RangeSubset Valid With Bogus Identifiers</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24 and 25; 9.3.1.3 Tables 16 and 17; 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="FieldIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:value-of select="concat($FieldIdentifier, ',Bogus')"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><RangeSubset>
                          <FieldSubset>
                            <ows11:Identifier>
                              <xsl:value-of select="$FieldIdentifier"/>
                            </ows11:Identifier>
                            <ows11:Identifier>Bogus</ows11:Identifier>
                          </FieldSubset>
                        </RangeSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' FieldSubset / Identifier',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  FieldSubset / Identifier but found
                                    <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_InterpolationMethod">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with an InterpolationMethod
           is submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 78. GetCoverage RangeSubset InterpolationMethod</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24 and 25; 9.3.1.3 Tables 16 and 17; H.3.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="FieldIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']"/></xsl:variable>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="InterpolationMethod"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='InterpolationMethods']/*[local-name()='InterpolationMethod']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:value-of select="concat($FieldIdentifier,':',$InterpolationMethod)"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><RangeSubset>
                          <FieldSubset>
                            <ows11:Identifier>
                              <xsl:value-of select="$FieldIdentifier"/>
                            </ows11:Identifier>
                            <InterpolationType>
                              <xsl:value-of select="$InterpolationMethod"/>
                            </InterpolationType>
                          </FieldSubset>
                        </RangeSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_InterpolationMethod_Missing">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a missing
           InterpolationMethod is submitted, the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 79. GetCoverage RangeSubset InterpolationMethod Missing</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24 and 25; 9.3.1.3 Tables 16 and 17; H.3.1; 10.3.2">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="FieldIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']"/></xsl:variable>
            <xsl:variable name="InterpolationMethod"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='InterpolationMethods']/*[local-name()='InterpolationMethod']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:value-of select="concat($FieldIdentifier, ':')"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><RangeSubset>
                          <FieldSubset>
                            <ows11:Identifier>
                              <xsl:value-of select="$FieldIdentifier"/>
                            </ows11:Identifier>
                            <InterpolationType/>
                          </FieldSubset>
                        </RangeSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' FieldSubset / InterpolationMethod',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  FieldSubset / InterpolationMethod but found
                                   <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_InterpolationMethod_Bogus">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a bogus
           InterpolationMethod is submitted, the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 80. GetCoverage RangeSubset InterpolationMethod Bogus</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24 and 25; 9.3.1.3 Tables 16 and 17; H.3.1; 10.3.2">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="FieldIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']"/></xsl:variable>
            <xsl:variable name="InterpolationMethod"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='InterpolationMethods']/*[local-name()='InterpolationMethod']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:value-of select="concat($FieldIdentifier, ':Bogus')"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><RangeSubset>
                          <FieldSubset>
                            <ows11:Identifier>
                              <xsl:value-of select="$FieldIdentifier"/>
                            </ows11:Identifier>
                            <InterpolationType>Bogus</InterpolationType>
                          </FieldSubset>
                        </RangeSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' FieldSubset / InterpolationMethod',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  FieldSubset / InterpolationMethod but found
                                   <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_One_Key">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with an Axis Identifier and
           one Axis Key is submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 81. GetCoverage RangeSubset Axis Identifier One Key</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; and 9.3.1.3 Tables 16, 17, 18 and 19">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="FieldIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']"/></xsl:variable>
            <xsl:variable name="AxisIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/@identifier"/></xsl:variable>
            <xsl:variable name="AxisKey"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/*[local-name()='AvailableKeys']/*[local-name()='Key']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:value-of select="concat($FieldIdentifier, '[', $AxisIdentifier, '[', $AxisKey, ']]')"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><RangeSubset>
                          <FieldSubset>
                            <ows11:Identifier>
                              <xsl:value-of select="$FieldIdentifier"/>
                            </ows11:Identifier>
                            <AxisSubset>
                              <Identifier>
                                <xsl:value-of select="$AxisIdentifier"/>
                              </Identifier>
                              <Key>
                                <xsl:value-of select="$AxisKey"/>
                              </Key>
                            </AxisSubset>
                          </FieldSubset>
                        </RangeSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_Some_Keys">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with an Axis Identifier and
           some Axis Keys is submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 82. GetCoverage RangeSubset Axis Identifier Some Keys</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; and 9.3.1.3 Tables 16, 17, 18 and 19">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="FieldIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']"/></xsl:variable>
            <xsl:variable name="AxisIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/@identifier"/></xsl:variable>
            <xsl:variable name="AxisKey1"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/*[local-name()='AvailableKeys']/*[local-name()='Key']"/></xsl:variable>
            <xsl:variable name="AxisKey2"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/*[local-name()='AvailableKeys']/*[local-name()='Key'][2]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:value-of select="concat($FieldIdentifier, '[', $AxisIdentifier, '[', $AxisKey1, ',', $AxisKey2, ']]')"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><RangeSubset>
                          <FieldSubset>
                            <ows11:Identifier>
                              <xsl:value-of select="$FieldIdentifier"/>
                            </ows11:Identifier>
                            <AxisSubset>
                              <Identifier>
                                <xsl:value-of select="$AxisIdentifier"/>
                              </Identifier>
                              <Key>
                                <xsl:value-of select="$AxisKey1"/>
                              </Key>
                              <Key>
                                <xsl:value-of select="$AxisKey2"/>
                              </Key>
                            </AxisSubset>
                          </FieldSubset>
                        </RangeSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_All_Keys">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with an Axis Identifier and
           all its Axis Keys is submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 83. GetCoverage RangeSubset Axis Identifier All Keys</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; and 9.3.1.3 Tables 16, 17, 18 and 19">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="FieldIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']"/></xsl:variable>
            <xsl:variable name="AxisIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/@identifier"/></xsl:variable>
            <xsl:variable name="AxisKey1"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/*[local-name()='AvailableKeys']/*[local-name()='Key']"/></xsl:variable>
            <xsl:variable name="AxisKey2"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/*[local-name()='AvailableKeys']/*[local-name()='Key'][2]"/></xsl:variable>
            <xsl:variable name="AxisKey3"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/*[local-name()='AvailableKeys']/*[local-name()='Key'][3]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:value-of select="concat($FieldIdentifier, '[', $AxisIdentifier, '[', $AxisKey1, ',', $AxisKey2, ',', $AxisKey3, ']]')"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><RangeSubset>
                          <FieldSubset>
                            <ows11:Identifier>
                              <xsl:value-of select="$FieldIdentifier"/>
                            </ows11:Identifier>
                            <AxisSubset>
                              <Identifier>
                                <xsl:value-of select="$AxisIdentifier"/>
                              </Identifier>
                              <Key>
                                <xsl:value-of select="$AxisKey1"/>
                              </Key>
                              <Key>
                                <xsl:value-of select="$AxisKey2"/>
                              </Key>
                              <Key>
                                <xsl:value-of select="$AxisKey3"/>
                              </Key>
                            </AxisSubset>
                          </FieldSubset>
                        </RangeSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_No_Key">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with an Axis Identifier and
           no Axis Key is submitted, the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 84. GetCoverage RangeSubset Axis Identifier No Key</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; 9.3.1.3 Tables 16, 17, 18 and 19; 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="FieldIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']"/></xsl:variable>
            <xsl:variable name="AxisIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/@identifier"/></xsl:variable>
            <xsl:variable name="AxisKey"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/*[local-name()='AvailableKeys']/*[local-name()='Key']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:value-of select="concat($FieldIdentifier, '[', $AxisIdentifier, ']')"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><RangeSubset>
                          <FieldSubset>
                            <ows11:Identifier>
                              <xsl:value-of select="$FieldIdentifier"/>
                            </ows11:Identifier>
                            <AxisSubset>
                              <Identifier>
                                <xsl:value-of select="$AxisIdentifier"/>
                              </Identifier>
                            </AxisSubset>
                          </FieldSubset>
                        </RangeSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' FieldSubset / AxisSubset / Key',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  FieldSubset / AxisSubset / Key but found
                                      <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_Bogus_Key">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with an Axis Identifier and
           a bogus Axis Key is submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 85. GetCoverage RangeSubset Axis Identifier Bogus Key</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; 9.3.1.3 Tables 16, 17, 18 and 19; and 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="FieldIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']"/></xsl:variable>
            <xsl:variable name="AxisIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/@identifier"/></xsl:variable>
            <xsl:variable name="AxisKey"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/*[local-name()='AvailableKeys']/*[local-name()='Key']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:value-of select="concat($FieldIdentifier, '[', $AxisIdentifier, '[Bogus]]')"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><RangeSubset>
                          <FieldSubset>
                            <ows11:Identifier>
                              <xsl:value-of select="$FieldIdentifier"/>
                            </ows11:Identifier>
                            <AxisSubset>
                              <Identifier>
                                <xsl:value-of select="$AxisIdentifier"/>
                              </Identifier>
                              <Key>Bogus</Key>
                            </AxisSubset>
                          </FieldSubset>
                        </RangeSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' FieldSubset / AxisSubset / Key',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  FieldSubset / AxisSubset / Key but found
                                      <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Colon_Between_Field_Identifiers">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request using KVP with a colon
           between Field Identifiers is submitted, the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 86. GetCoverage RangeSubset KVP Syntax Colon Between Field Identifiers</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; 10.2.2.2; 9.3.1.3 Tables 16, 17, 18 and 19; and 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="FieldIdentifier1"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']"/></xsl:variable>
            <xsl:variable name="FieldIdentifier2"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier'][2]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:if test="string-length($FieldIdentifier2) = 0">
                        <ctl:message>FieldIdentifier2 is not found. Need to skip test.</ctl:message>
                      </xsl:if><xsl:value-of select="concat($FieldIdentifier1,':',$FieldIdentifier2)"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise/>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' FieldSubset / Identifier',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  FieldSubset / Identifier but found
                                    <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Comma_Between_Field_Identifiers">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request using KVP with a comma
           between Field Identifiers is submitted, the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 87. GetCoverage RangeSubset KVP Syntax Comma Between Field Identifiers</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; 10.2.2.2; 9.3.1.3 Tables 16, 17, 18 and 19; and 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="FieldIdentifier1"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']"/></xsl:variable>
            <xsl:variable name="FieldIdentifier2"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier'][2]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:if test="string-length($FieldIdentifier2) = 0">
                        <ctl:message>FieldIdentifier2 is not found. Need to skip test.</ctl:message>
                      </xsl:if><xsl:value-of select="concat($FieldIdentifier1,',',$FieldIdentifier2)"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise/>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' FieldSubset / Identifier',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  FieldSubset / Identifier but found
                                    <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Semicolon_Between_Field_Identifier_And_InterpolationMethod">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request using KVP with a semicolon
           between Field Identifier And InterpolationMethod is submitted,
           the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 88. GetCoverage RangeSubset KVP Syntax Semicolon Between Field Identifier And InterpolationMethod</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; 10.2.2.2; 9.3.1.3 Tables 16, 17, 18 and 19; and 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="FieldIdentifier1"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']"/></xsl:variable>
            <xsl:variable name="InterpolationMethod"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='InterpolationMethods']/*[local-name()='InterpolationMethod']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:value-of select="concat($FieldIdentifier1,';',$InterpolationMethod)"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise/>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' FieldSubset / Identifier',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  FieldSubset / Identifier but found
                                    <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Semicolon_Between_Axis_Identifiers">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request using KVP with a semicolon
           between Axis Identifiers is submitted, the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 89. GetCoverage RangeSubset KVP Syntax Semicolon Between Axis Identifiers</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; 10.2.2.2; 9.3.1.3 Tables 16, 17, 18 and 19; and 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="FieldIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']"/></xsl:variable>
            <xsl:variable name="AxisIdentifier1"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/@identifier"/></xsl:variable>
            <xsl:variable name="AxisIdentifier2"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/*[local-name()='Identifier'][2]"/></xsl:variable>
            <xsl:variable name="AxisKey1"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/*[local-name()='AvailableKeys']/*[local-name()='Key']"/></xsl:variable>
            <xsl:variable name="AxisKey2"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/*[local-name()='AvailableKeys']/*[local-name()='Key'][2]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:value-of select="concat($FieldIdentifier,'[',$AxisIdentifier1,'[',$AxisKey1,']',';',$AxisIdentifier2,'[',$AxisKey2,']',']')"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise/>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' RangeSubset',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  RangeSubset but found
                                 <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Semicolon_Between_Axis_Keys">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request using KVP with a semicolon
           between Axis Keys is submitted, the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 90. GetCoverage RangeSubset KVP Syntax Semicolon Between Axis Keys</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; 10.2.2.2; 9.3.1.3 Tables 16, 17, 18 and 19; and 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="FieldIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']"/></xsl:variable>
            <xsl:variable name="AxisIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/@identifier"/></xsl:variable>
            <xsl:variable name="AxisKey1"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/*[local-name()='AvailableKeys']/*[local-name()='Key']"/></xsl:variable>
            <xsl:variable name="AxisKey2"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/*[local-name()='AvailableKeys']/*[local-name()='Key'][2]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:value-of select="concat($FieldIdentifier,'[',$AxisIdentifier,'[',$AxisKey1,';',$AxisKey2,']',']')"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise/>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' RangeSubset',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  RangeSubset but found
                                 <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Missing_Opening_Square_Bracket_Before_Axis_Identifier">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request using KVP with a missing
           opening square bracket before the axis identifier is submitted,
           the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 91. GetCoverage RangeSubset KVP Syntax Missing  Opening Square Bracket Before Axis Identifier</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; 10.2.2.2; 9.3.1.3 Tables 16, 17, 18 and 19; and 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="FieldIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']"/></xsl:variable>
            <xsl:variable name="AxisIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/@identifier"/></xsl:variable>
            <xsl:variable name="AxisKey"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/*[local-name()='AvailableKeys']/*[local-name()='Key']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:value-of select="concat($FieldIdentifier,$AxisIdentifier,'[',$AxisKey,']',']')"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise/>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' RangeSubset',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  RangeSubset but found
                                 <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Missing_Opening_Square_Bracket_Before_Axis_Key">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request using KVP with a missing
           opening square bracket before the axis key is submitted,
           the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 92. GetCoverage RangeSubset KVP Syntax Missing  Opening Square Bracket Before Axis Key</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; 10.2.2.2; 9.3.1.3 Tables 16, 17, 18 and 19; and 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="FieldIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']"/></xsl:variable>
            <xsl:variable name="AxisIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/@identifier"/></xsl:variable>
            <xsl:variable name="AxisKey"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/*[local-name()='AvailableKeys']/*[local-name()='Key']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:value-of select="concat($FieldIdentifier,'[',$AxisIdentifier,$AxisKey,']',']')"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise/>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' RangeSubset',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  RangeSubset but found
                                 <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Missing_Closing_Square_Bracket">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request using KVP with a missing
           closing square bracket is submitted, the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 93. GetCoverage RangeSubset KVP Syntax Missing Closing Square Bracket</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; 10.2.2.2; 9.3.1.3 Tables 16, 17, 18 and 19; and 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="FieldIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']"/></xsl:variable>
            <xsl:variable name="AxisIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/@identifier"/></xsl:variable>
            <xsl:variable name="AxisKey"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/*[local-name()='AvailableKeys']/*[local-name()='Key']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:value-of select="concat($FieldIdentifier,'[',$AxisIdentifier,'[',$AxisKey,']')"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise/>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' RangeSubset',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  RangeSubset but found
                                 <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_Formats">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a format
           is submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 94. GetCoverage Formats</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 10.2.1.1 Tables 21, 22 and 23.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_Bogus_Format">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a bogus format
           is submitted, the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 95. GetCoverage Bogus Format</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23; 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="Format">Bogus</ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><Output format="Bogus"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' Format',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  Format but found
                                      <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_Empty_Format">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with an empty string for
           the format is submitted, the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 96. GetCoverage Empty Format</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23; 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="Format"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><Output format=""/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' Format',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  Format but found
                                      <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_Missing_Format">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with the format missing
           is submitted, the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 97. GetCoverage Missing Format</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23; 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1">
                        <ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier>
                        <DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset>
                      </GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' Format',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  Format but found
                                      <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_Store_True">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a store parameter set
           to true is submitted, the response is an exception or not depending
           on the capabilities.</ctl:assertion>
      <ctl:comment xmlns="">Table 98. GetCoverage Store True</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23; 10.2.1.3; 8.3.2.3.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="Storable"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='store parameter']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                    <ctl:param name="Store">true</ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><Output format="{$SupportedFormat}" store="true"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_Store_False">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a store parameter
           set to false is submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 99. GetCoverage Store False</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23; and 10.2.1.3.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                    <ctl:param name="Store">false</ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><Output format="{$SupportedFormat}" store="false"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_Store_Bogus">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:param name="identifier2"/>
      <ctl:param name="identifier3"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a store parameter
           set to a bogus value is submitted, the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 100. GetCoverage Store Bogus</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23; and 10.2.1.3.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox']/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                    <ctl:param name="Store">bogus</ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><Output format="{$SupportedFormat}" store="bogus"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' store',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  store but found
                                       <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
  </ctl:package>
</ctl:package>